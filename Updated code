@drivesession_blueprint.route('/api/v1/driveSessions/filters', methods=['GET'])
@cognito_auth_required
@authorization_required(perms={"list:driveSessionsFilters"})
def list_drive_session_filters() -> ResponseReturnValue:
    """
    Fetch filter options from dynamoDB table - version 2.

    Returns:
        (ResponseReturnValue): filter options list and status code.
    """
    try:
        page = request.args.get('page')
        filter_level = request.args.get('filter_level')
        project_name = request.args.get('project_name')
        lookup_response = lookup_table.scan(
            FilterExpression=boto3.dynamodb.conditions.Attr('project_name').eq(
                project_name
            )
        )
        items = lookup_response.get('Items', [])
        drive_session_index_name = ""
        for item in items:
            drive_session_index_name = str(
                item.get("drive_session_table_name", "")
            )
        filter_response = filter_attributes_table.get_item(
            Key={'page': page, 'filter_level': filter_level}
        )
        response = filter_response['Item']['attributes']  # type: ignore
        final_response = append_vehicle_ids(
            response, drive_session_index_name
        )
        logging.info(
            f"dynamoDB response for fetching filter "
            f"attributes: {final_response}"
        )
        return (
            jsonify(final_response),  # type: ignore
            200,
        )
    except KeyError as e:
        logging.error("KeyError occurred: %s", str(e))
        return (
            jsonify({'message': "No generation category information found"}),
            404,
        )
    except Exception as e:
        logging.exception(f"An error occurred: {str(e)}")
        return jsonify({"message": str(e)}), 500

def append_vehicle_ids(response: dict, drive_session_index_name: str) -> dict:
    """
    Append vehicle IDs to the 'vehicle_id' dropdown values in the response.

    Args:
        response (dict): Filter response
        drive_session_index_name (str): Name of the drive session index

    Returns:
        dict: Response returning with the vehicle_ids
    """
    from opensearch_utility import DriveSessionVehicleUtility  # type: ignore

    search_obj = DriveSessionVehicleUtility(drive_session_index_name)
    vehicle_ids = search_obj.get_unique_vehicle_ids()

    if "vehicle_id" in response and vehicle_ids:
        response["vehicle_id"]["props"]["dropdown_values"] = vehicle_ids

    return response

I have written test case for above API 

@mock_aws
@patch('flask_cognito.cognito_auth_required', lambda f: f)
@patch("auth.utils.get_user_management_config",
       Mock(return_value=USER_CONFIG_DETAILS))
@patch("auth.routes.get_user_details")
@patch("auth.routes.current_cognito_jwt", {"sub": "mock_user_id"})
def test_list_drive_session_filters_(mock_get_user_details,
                                       cloudwatch_log_client, ssm_client,
                                       dynamodb_resource):
    """Test successful retrieval of drive session filters"""
    put_parameter_store_config(ssm_client, ENV)

    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)

    create_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)
    create_role_info_table(dynamodb_resource)
    add_roles_to_ddb(dynamodb_resource)

    delete_index(TEST_DRIVE_TABLE_NAME)

    with patch("drivesession.routes.filter_attributes_table") as mock_filter_table, \
        patch("drivesession.routes.lookup_table") as mock_lookup_table, \
        patch('utility.get_db_client') as mock_get_db_client:
        
        mock_lookup_table.scan.return_value = {
            "Items": [{"drive_session_table_name": "us-project-01"}]
        }

        mock_filter_table.get_item.return_value = {
            "Item": {
                key: deserializer.deserialize(value) for key, value in SAMPLE_FILTER_DRIVE_DATA.items()
            }
        }
        mock_get_db_client.return_value = OS_DB_CLIENT
        from main import app
        app.config['TESTING'] = True
        app.config["RoleTable"] = ROLE_TABLE_NAME
        app.extensions = MagicMock()
        app.extensions["cognito_auth"].return_value = "mock_token"
        mock_get_user_details.return_value = {
            "projects": ["test-project"],
            "groups": [],
            "scopes": ROLE_TABLE_ITEMS[0]["scopes"]
        }
        with app.test_client() as client:
            client.set_cookie("user_id", "100")
            create_index(TEST_DRIVE_TABLE_NAME, "drive")
            insert_data_to_index(TEST_DRIVE_TABLE_NAME, "drive",
                                 SAMPLE_DRIVE_DATA)
            response = client.get('/api/v1/driveSessions/filters',
                                  query_string={'page': "drive_sessions",
                                                'filter_level': "L2",
                                                'project_name': "us-project-01"
                                                })

            expected_response = {
                'folder_name': {
                    'component': 'Text', 
                    'props': {
                        'label': 'folder_name', 
                        'variant': 'outlined'
                        }, 
                    'type': 'text'
                    }, 
                'rec_year_month': {
                    'component': 'DatePicker', 
                    'props': {
                        'format': 'YYYY/MM'
                        }, 
                    'type': 'text'
                    }, 
                'rec_year_month_date': {
                    'component': 'DatePicker', 
                    'props': {
                        'format': 'YYYY/MM/DD'
                        }, 
                    'type': 'text'
                    }, 
                'rec_year_month_date_range': {
                    'component': 'DateTimeRangeFilter', 
                    'db_fields': ['rec_year_month_date'], 
                    'type': 'range'
                    }, 
                    'tags': {
                        'component': 'Text', 
                        'multiple': 'true', 
                        'props': {
                            'label': 'tags', 
                            'variant': 'outlined'
                            }, 
                    'type': 'text'
                    }, 
                'vehicle_id': {
                    'component': 'Text', 
                    'props': {
                        'dropdown_name': 'vehicle_id',
                        'dropdown_values': [], 
                        'label': 'vehicle_id', 
                        'values': [], 
                        'variant': 'outlined', 
                        'visibility': 'true'
                        }, 
                    'type': 'text'
                    }
                }

            data = response.json
            print(f"data: {data}")
            assert response.status_code == 400
            assert data == expected_response

    delete_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)


but append_vehicle_ids function has if condtion in success scenario  it should go inside if and add vehicles if we have vehicle_ids 
but vehicle_ids returning empty list 


we are inserting sample data into index but i am not sure that data is refering this test case or do we need to create mock of that?

please refere sample data

SAMPLE_DRIVE_DATA = [
    {
        'created_at': '2023-08-07T07:30:09',
        'display_id': 'test-disp-1122',
        'folder_name': '20220301_024541',
        'gps_information': {'GPS_x': '138.24444283333332',
                            'GPS_y': '34.9024865',
                            'GPS_z': '48.29999923706055',
                            'Time': '2022-03-01 02:45:45.400000'},
        'rec_year_month': '202203',
        'rec_year_month_date': '20220301',
        's3_uri': {
            'rosbag': 's3://test_bucket/20220301_024541_13_event.bag',
            'thumbnail': 's3://test_bucket/20220301_024541_13_'
                         'event_thumbnail.webp'},
        'start_time': '2022-03-01T02:45:44',
        'stop_time': '2022-03-01T02:45:45',
        'updated_at': '2023-08-07T18:59:59',
        'user_name': 'sagar',
        'vehicle_id': '11',
        "trajectory": {
            "coordinates": [
                [
                    29.81324683333333,
                    -95.42999749999998
                ],
                [
                    29.81326016666667,
                    -95.43001816666668
                ],
                [
                    29.81335483333333,
                    -95.43000933333333
                ],
                [
                    29.813448666666666,
                    -95.42994433333334
                ],
                [
                    29.813509,
                    -95.42994233333333
                ]
            ]
        },
        'current_status': 'InProgress',
        'pipeline_status': {
            'upload': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"
            }, 
            'conversion': {
                'status': "Completed",
                'error_log_name': "",
                'updated_at': "2023-08-11 03:43:25.764165"	
            }, 
            'merge_avi': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"    	
            }, 
            'merge_parquet': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"    	    	
            }, 
            'rosbag': {
                'status': "InProgress",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"
            },
			'statistics': {
                'status': "Pending",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"	
			}
        }
    },
    {
        'created_at': '2023-08-07T07:30:09',
        'display_id': 'test-002',
        'folder_name': '20220301_075415',
        'gps_information': {},
        'rec_year_month': '202203',
        'rec_year_month_date': '20220301',
        's3_uri': {
            'rosbag': 's3://test_bucket/20220301_233557_14_event.bag',
            'thumbnail': 's3://test_bucket/20220301_233557_14_thumbnail.webp'},
        'start_time': '2022-03-01T07:56:19',
        'stop_time': '2022-03-01T08:01:19',
        'updated_at': '2023-08-10T03:43:25',
        'user_name': 'sagar',
        'vehicle_id': '11',
        'current_status': 'Failed',
        'pipeline_status': {
            'upload': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"
            }, 
            'conversion': {
                'status': "Completed",
                'error_log_name': "",
                'updated_at': "2023-08-11 03:43:25.764165"	
            }, 
            'merge_avi': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"    	
            }, 
            'merge_parquet': {
                'status': "Failed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"    	    	
            }, 
            'rosbag': {
                'status': "Pending",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"
            },
			'statistics': {
                'status': "Pending",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"	
			}
        },
        "trajectory": {
            "coordinates": [
                [
                    29.81324683333333,
                    -95.42999749999998
                ],
                [
                    29.81326016666667,
                    -95.43001816666668
                ],
                [
                    29.81335483333333,
                    -95.43000933333333
                ],
                [
                    29.813448666666666,
                    -95.42994433333334
                ],
                [
                    29.813509,
                    -95.42994233333333
                ]
            ]
        }
    },
    {
        'created_at': '2023-08-07T07:27:09',
        'display_id': '7e1c8d95-4d42-4e90-8df8-1e2e52e2728e',
        'folder_name': '20220301_000401',
        'gps_information': {'GPS_x': '', 'GPS_y': '', 'GPS_z': '', 'Time': ''},
        'rec_year_month': '202203',
        'rec_year_month_date': '20220301',
        's3_uri': {'rosbag': 's3://test_bucket/20220301_233557_14_event.bag',
                   'thumbnail': 's3://test_bucket/20220301_233557_14_'
                                'thumbnail.webp'},
        'start_time': '2022-03-01T00:04:15',
        'stop_time': '2022-03-01T00:34:15',
        'updated_at': '2023-08-07T07:27:09',
        'user_name': 'shagun',
        'vehicle_id': '11',
        'current_status': 'Completed',
        'pipeline_status': {
            'upload': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"
            }, 
            'conversion': {
                'status': "Completed",
                'error_log_name': "",
                'updated_at': "2023-08-11 03:43:25.764165"	
            }, 
            'merge_avi': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"    	
            }, 
            'merge_parquet': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"    	    	
            }, 
            'rosbag': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"
            },
			'statistics': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"	
			}
        },
        "trajectory": {
            "coordinates": [
                [
                    29.81324683333333,
                    -95.42999749999998
                ],
                [
                    29.81326016666667,
                    -95.43001816666668
                ],
                [
                    29.81335483333333,
                    -95.43000933333333
                ],
                [
                    29.813448666666666,
                    -95.42994433333334
                ],
                [
                    29.813509,
                    -95.42994233333333
                ]
            ]
        },
        "description": {
            "short": "Highways, which are designed to support long-distance \
              travel, play crucial role in the transportation infrastructure.",
            "medium": "Highways, which are designed to support long-distance \
              travel, play crucial role in the transportation infrastructure. \
                These roads typically have multiple lanes and are designed to \
                  accommodate high-speed traffic, which requires smooth, \
                    consistent surfaces and clear markings.",
            "japanese": "車両と道路、街路の状況、天候、交通パターン、\
              そして高速道路のインフラとの相互作用は、旅行の安全性、効率性、\
                快適性を左右する重要な要素です。道路の状態そのものが、\
                  車両の性能や運転行動に大きく影響します。道路は、\
                    スムーズで良く整備された高速道路から、\
                      舗装が悪く凸凹のある道路まで多岐にわたり、\
                        各タイプの道路が車両に異なる課題をもたらします。"
        }
    },
    {
        'created_at': '2023-08-07T07:27:09',
        'display_id': '510a8dcc-0884-47bb-91d6-c87824532313',
        'folder_name': '20220301_012315',
        'gps_information': {'GPS_x': '', 'GPS_y': '', 'GPS_z': '', 'Time': ''},
        'rec_year_month': '202203',
        'rec_year_month_date': '20220301',
        's3_uri': {'rosbag': 's3://test_bucket/20220301_233557_14_event.bag',
                   'thumbnail': 's3://test_bucket/20220301_233557_14_'
                                'thumbnail.webp'},
        'start_time': '2022-03-01T01:30:15',
        'stop_time': '2022-03-01T01:45:15',
        'updated_at': '2023-08-07T07:27:09',
        'user_name': 'shagun',
        'vehicle_id': '12',
        'current_status': 'Completed',
        'pipeline_status': {
            'upload': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"
            }, 
            'conversion': {
                'status': "Completed",
                'error_log_name': "",
                'updated_at': "2023-08-11 03:43:25.764165"	
            }, 
            'merge_avi': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"    	
            }, 
            'merge_parquet': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"    	    	
            }, 
            'rosbag': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"
            },
			'statistics': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"	
			}
        },
        "trajectory": {
            "coordinates": [
                [
                    29.81324683333333,
                    -95.42999749999998
                ],
                [
                    29.81326016666667,
                    -95.43001816666668
                ],
                [
                    29.81335483333333,
                    -95.43000933333333
                ],
                [
                    29.813448666666666,
                    -95.42994433333334
                ],
                [
                    29.813509,
                    -95.42994233333333
                ]
            ]
        },
        "description": {
            "short": "Highways, which are designed to support long-distance \
              travel, play crucial role in the transportation infrastructure.",
            "medium": "Highways, which are designed to support long-distance \
              travel, play crucial role in the transportation infrastructure. \
                These roads typically have multiple lanes and are designed to \
                  accommodate high-speed traffic, which requires smooth, \
                    consistent surfaces and clear markings.",
            "japanese": "車両と道路、街路の状況、天候、交通パターン、\
              そして高速道路のインフラとの相互作用は、旅行の安全性、効率性、\
                快適性を左右する重要な要素です。道路の状態そのものが、\
                  車両の性能や運転行動に大きく影響します。道路は、\
                    スムーズで良く整備された高速道路から、\
                      舗装が悪く凸凹のある道路まで多岐にわたり、\
                        各タイプの道路が車両に異なる課題をもたらします。"
        }
    },
    {
        'created_at': '2023-08-07T07:30:09',
        'display_id': 'test-005',
        'folder_name': '20220301_233557',
        'gps_information': {},
        'rec_year_month': '202203',
        'rec_year_month_date': '20220301',
        's3_uri': {
            'rosbag': 's3://test_bucket/20220301_233557_14_event.bag',
            'thumbnail': 's3://test_bucket/20220301_233557_14_thumbnail.webp'},
        'start_time': '2022-03-01T23:58:00',
        'stop_time': '2022-03-02T00:28:00',
        'updated_at': '2023-08-10T03:43:25',
        'user_name': 'sagar',
        'vehicle_id': '13',
        'current_status': 'Failed',
        'pipeline_status': {
            'upload': {
                'status': "Completed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"
            }, 
            'conversion': {
                'status': "Completed",
                'error_log_name': "",
                'updated_at': "2023-08-11 03:43:25.764165"	
            }, 
            'merge_avi': {
                'status': "Failed",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"    	
            }, 
            'merge_parquet': {
                'status': "InProgress",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"    	    	
            }, 
            'rosbag': {
                'status': "Pending",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"
            },
			'statistics': {
                'status': "Pending",
                'error_log_name': [""],
                'updated_at': "2023-08-10 03:43:25.764165"	
			}
        },
        "trajectory": {
            "coordinates": [
                [
                    29.81324683333333,
                    -95.42999749999998
                ],
                [
                    29.81326016666667,
                    -95.43001816666668
                ],
                [
                    29.81335483333333,
                    -95.43000933333333
                ],
                [
                    29.813448666666666,
                    -95.42994433333334
                ],
                [
                    29.813509,
                    -95.42994233333333
                ]
            ]
        }
    }
]
