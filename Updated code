I have an API see below,

@drivesession_blueprint.route('/api/v1/driveSessions/filters', methods=['GET'])
@cognito_auth_required
@authorization_required(perms={"list:driveSessionsFilters"})
def list_drive_session_filters() -> ResponseReturnValue:
    """
    Fetch filter options from dynamoDB table - version 2.

    Returns:
        (ResponseReturnValue): filter options list and status code.
    """
    try:
        page = request.args.get('page')
        filter_level = request.args.get('filter_level')
        project_name = request.args.get('project_name')
        lookup_response = lookup_table.scan(
            FilterExpression=boto3.dynamodb.conditions.Attr('project_name').eq(
                project_name
            )
        )
        items = lookup_response.get('Items', [])
        drive_session_index_name = ""
        for item in items:
            drive_session_index_name = str(
                item.get("drive_session_table_name", "")
            )
        filter_response = filter_attributes_table.get_item(
            Key={'page': page, 'filter_level': filter_level}
        )
        response = filter_response['Item']['attributes']  # type: ignore
        final_response = append_vehicle_ids(
            response, drive_session_index_name
        )
        logging.info(
            f"dynamoDB response for fetching filter "
            f"attributes: {final_response}"
        )
        return (
            jsonify(final_response),  # type: ignore
            200,
        )
    except KeyError as e:
        logging.error("KeyError occurred: %s", str(e))
        return (
            jsonify({'message': "No generation category information found"}),
            404,
        )
    except Exception as e:
        logging.exception(f"An error occurred: {str(e)}")
        return jsonify({"message": str(e)}), 500


I have return a test case for Success scenarion see below

@mock_aws
@patch('flask_cognito.cognito_auth_required', lambda f: f)
@patch("auth.utils.get_user_management_config",
       Mock(return_value=USER_CONFIG_DETAILS))
@patch("auth.routes.get_user_details")
@patch("auth.routes.current_cognito_jwt", {"sub": "mock_user_id"})
def test_list_drive_session_filters(mock_get_user_details,
                                       cloudwatch_log_client, ssm_client,
                                       dynamodb_resource):
    """Test successful retrieval of drive session filters"""
    put_parameter_store_config(ssm_client, ENV)
    
    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)

    create_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)
    create_role_info_table(dynamodb_resource)
    add_roles_to_ddb(dynamodb_resource)
    delete_index(TEST_DRIVE_TABLE_NAME)

    with patch('utility.get_db_client') as mock_get_db_client:
        mock_get_db_client.return_value = OS_DB_CLIENT
        from main import app
        app.config['TESTING'] = True
        app.config["RoleTable"] = ROLE_TABLE_NAME
        app.extensions = MagicMock()
        app.extensions["cognito_auth"].return_value = "mock_token"
        mock_get_user_details.return_value = {
            "projects": ["test-project"],
            "groups": [],
            "scopes": ROLE_TABLE_ITEMS[0]["scopes"]
        }
        with app.test_client() as client:
            client.set_cookie("user_id", "100")
            create_lookup_table(dynamodb_resource)
            lookup_resource = dynamodb_resource.Table(LOOKUP_TABLE_NAME)
            insert_items_into_lookup_table(lookup_resource)

            create_filter_attribute_table(dynamodb_resource)
            filter_table = dynamodb_resource.Table(FILTER_ATTRIBUTES_TABLE_NAME)
            insert_items_into_filter_attribute_drivesession_table(
                filter_table,
                SAMPLE_FILTER_DRIVE_DATA
            )

            create_index(TEST_DRIVE_TABLE_NAME, "drive")
            insert_data_to_index(TEST_DRIVE_TABLE_NAME, "drive",
                                 SAMPLE_DRIVE_DATA)
            response = client.get('/api/v1/driveSessions/filters',
                                  query_string={
                                    'page': PAGE,
                                    'filter_level': FILTER_LEVEL,
                                    'project_name': (f"{lookup_data[0]['project_name']}")
                                })

            expected_response = {
                   "folder_name": {
                      "component": "Text",
                      "props": {
                         "label": "folder_name",
                         "variant": "outlined"
                      },
                      "type": "text"
                   },
                   "rec_year_month": {
                      "component": "DatePicker",
                      "props": {
                         "format": "YYYY/MM"
                      },
                      "type": "text"
                   },
                   "rec_year_month_date": {
                      "component": "DatePicker",
                      "props": {
                         "format": "YYYY/MM/DD"
                      },
                      "type": "text"
                   },
                   "rec_year_month_date_range": {
                      "component": "DateTimeRangeFilter",
                      "db_fields": [
                         "rec_year_month_date"
                      ],
                      "type": "range"
                   },
                   "tags": {
                      "component": "Text",
                      "multiple": "true",
                      "props": {
                         "label": "tags",
                         "variant": "outlined"
                      },
                      "type": "text"
                   },
                   "vehicle_id": {
                      "component": "Selection",
                      "props": {
                         "dropdown_name": "vehicle_id",
                         "dropdown_values": [
                            "11",
                            "12"
                         ],
                         "label": "vehicle_id",
                         "values": [],
                         "variant": "outlined",
                         "visibility": "true"
                      },
                      "type": "text"
                   }
                }

            data = response.json
            assert response.status_code == 200
            assert data == expected_response

    delete_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)

but i want to write a test case for exception code and it should be covered.

