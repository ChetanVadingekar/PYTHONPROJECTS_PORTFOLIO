
@pytest.fixture(scope="function")
def ssm_client(aws_credentials):
    """Create a boto3 ssm client."""
    with mock_aws():
        ssm_client = boto3.client("ssm", region_name="ap-northeast-1")
        yield ssm_client

@pytest.fixture
def setup_cloudwatch(cloudwatch_log_client, ssm_client):
   """Fixture to set up CloudWatch and SSM before each test."""
   put_parameter_store_config(ssm_client, PARAMETER_STORE_PARAMS)
   create_cloudwatch_log_group(cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)
   return cloudwatch_log_client

@mock_aws
def test_log_unstored_query_info_ssm_failure(setup_cloudwatch, ssm_client, common_test_data):
   """Test failure when SSM parameter retrieval fails"""
   cloudwatch_log_client = setup_cloudwatch
   from utility import log_unstored_query_info_to_cloudwatch
   with patch("utility.logging.error") as mock_logging_error:
       ssm_client.get_parameter.side_effect = KeyError("SSM Error")
       common_query_data = common_test_data.copy()
       common_query_data.update({
            "query_id": "test_query_id",
            "status_code": 200
        })
       log_unstored_query_info_to_cloudwatch(**common_query_data)
       print(f"mock error ssm failure : {mock_logging_error.call_args[0][0]}")
       mock_logging_error.assert_called_with(
           "AWS ClientError while logging to CloudWatch An error occurred (ParameterNotFound) when calling the GetParameter operation: Parameter /Dev/CloudWatch/UserQueryInfo/LogGroupName not found"
       )

@mock_aws
def test_log_unstored_query_info_ssm_missing_key(setup_cloudwatch, ssm_client, common_test_data):
   """Test failure when SSM response is missing 'Parameter' or 'Value'"""
   from utility import log_unstored_query_info_to_cloudwatch
   cloudwatch_log_client = setup_cloudwatch
   with patch("utility.logging.error") as mock_logging_error:
       ssm_client.get_parameter.return_value = {}
       common_query_data = common_test_data.copy()
       common_query_data.update({
            "query_id": "test_query_id",
            "status_code": 200
        })
       log_unstored_query_info_to_cloudwatch(**common_query_data)
       print(f"mock error ssm missing key: {mock_logging_error.call_args[0][0]}")
       mock_logging_error.assert_called_with(
           "AWS ClientError while logging to CloudWatch An error occurred (ParameterNotFound) when calling the GetParameter operation: Parameter /Dev/CloudWatch/UserQueryInfo/LogGroupName not found."
       )

@mock_aws
def test_log_unstored_query_info_client_error(setup_cloudwatch,common_test_data):
   """Test failure when AWS ClientError occurs"""
   cloudwatch_log_client = setup_cloudwatch
   from utility import log_unstored_query_info_to_cloudwatch
   from botocore.exceptions import ClientError
   with patch("utility.logging.error") as mock_logging_error:
       cloudwatch_log_client.put_log_events.side_effect = ClientError(
           {"Error": {"Code": "AccessDenied", "Message": "Permission Denied"}}, "PutLogEvents"
       )
       common_query_data = common_test_data.copy()
       common_query_data.update({
            "query_id": "test_query_id",
            "status_code": 200
        })
       log_unstored_query_info_to_cloudwatch(**common_query_data)
       print(f"mock error client error: {mock_logging_error.call_args[0][0]}")
       mock_logging_error.assert_called_with(
           "AWS ClientError while logging to CloudWatch An error occurred (ParameterNotFound) when calling the GetParameter operation: Parameter /Dev/CloudWatch/UserQueryInfo/LogGroupName not found."
       )

for this test i am getting below error please fix this 

FAILED tests/test_utility.py::test_log_unstored_query_info_ssm_failure - AttributeError: 'method' object has no attribute 'side_effect'
FAILED tests/test_utility.py::test_log_unstored_query_info_ssm_missing_key - AttributeError: 'method' object has no attribute 'return_value'
FAILED tests/test_utility.py::test_log_unstored_query_info_client_error - AttributeError: 'method' object has no attribute 'side_effect'

