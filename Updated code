@mock_aws
@patch('flask_cognito.cognito_auth_required', lambda f: f)
@patch("auth.utils.get_user_management_config",
       Mock(return_value=USER_CONFIG_DETAILS))
@patch("auth.routes.get_user_details")
@patch("auth.routes.current_cognito_jwt", {"sub": "mock_user_id"})
def test_list_drive_session_filters_scan_client_error(mock_get_user_details,
                                       cloudwatch_log_client, ssm_client,
                                       dynamodb_resource):
    """Test Case: When DynamoDB scan throws a ClientError"""
    put_parameter_store_config(ssm_client, ENV)
    
    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)

    create_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)
    create_role_info_table(dynamodb_resource)
    add_roles_to_ddb(dynamodb_resource)
    delete_index(TEST_DRIVE_TABLE_NAME)
    create_lookup_table(dynamodb_resource)
    lookup_resource = dynamodb_resource.Table(LOOKUP_TABLE_NAME)
    insert_items_into_lookup_table(lookup_resource)
    create_filter_attribute_table(dynamodb_resource)

    with patch('utility.get_db_client') as mock_get_db_client:
        mock_get_db_client.return_value = OS_DB_CLIENT
        with patch('drivesession.routes.lookup_table.scan') as mock_scan:
            mock_scan.side_effect = botocore.exceptions.ClientError(
                error_response={
                    'Error': {"code": "ValidationException"}},
                operation_name="Scan"
            )
            from main import app
            app.config['TESTING'] = True
            mock_get_user_details.return_value = {
                "projects": ["test-project"],
                "groups": [],
                "scopes": ROLE_TABLE_ITEMS[0]["scopes"]
            }
            
            with app.test_client() as client:
                response = client.get('/api/v1/driveSessions/filters',
                                      query_string={
                                        'page': PAGE, 
                                        'filter_level': FILTER_LEVEL,
                                        'project_name': (f"{lookup_data[0]['project_name']}")
                                    })
                json_data = response.get_json()
                assert response.status_code == 500
                assert json_data['message'] == "An error occured while querying DynamoDB"

    delete_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)


test case getting failed due to 

DynamoDB ClientError: An error occurred (Unknown) when calling the Scan operation: validation error occured
