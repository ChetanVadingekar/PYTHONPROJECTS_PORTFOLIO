I have this API see below,

@drivesession_blueprint.route('/api/v1/driveSessions/filters', methods=['GET'])
@cognito_auth_required
@authorization_required(perms={"list:driveSessionsFilters"})
def list_drive_session_filters() -> ResponseReturnValue:
    """
    Fetch filter options for filtering DriveSessions entries.

    Returns:
        (ResponseReturnValue): filter options list and status code.
    """
    try:
        page = request.args.get('page')
        filter_level = request.args.get('filter_level')
        project_name = request.args.get('project_name')
        lookup_response = lookup_table.scan(
            FilterExpression=boto3.dynamodb.conditions.Attr('project_name').eq(
                project_name
            )
        )

        while lookup_response.get("LastEvaluatedKey"):
            response = lookup_table.scan(
                FilterExpression=boto3.dynamodb.conditions.
                Attr('project_name').eq(project_name),
                ExclusiveStartKey=response["LastEvaluatedKey"],
            )
            if response.get("Items"):
                lookup_response.extend(response.get("Items"))

        items = lookup_response.get('Items', [])
        if not items:
            raise ValueError("Project not found")
        
        for item in items:
            drive_session_index_name = str(
                item.get("drive_session_table_name", "")
            )
        if not drive_session_index_name:
            raise ValueError("Drive session table not found")
        
        filter_response = filter_attributes_table.get_item(
            Key={'page': page, 'filter_level': filter_level}
        )
        response = filter_response['Item']['attributes']
        final_response = append_vehicle_ids(
            response, drive_session_index_name
        )
        logging.info(
            f"dynamoDB response for fetching filter "
            f"attributes: {final_response}"
        )
        return (
            jsonify(final_response),
            200,
        )
    except ValueError as e:
        logging.error(f"Validation Error: {str(e)}")
        return (
            jsonify({'message': str(e)}),
            404,
        )
    except KeyError as e:
        logging.error("KeyError occurred: %s", str(e))
        return (
            jsonify(
                {'message': "A required key is missing from the response."}
            ),
            404,
        )
    except Exception as e:
        logging.exception(f"An error occurred: {str(e)}")
        return jsonify({"message": str(e)}), 500


for keyError please give more clear message in jsonify 
