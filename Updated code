 Here are the test cases for the /get-project-details API that cover all branches of the code. These test cases use the pytest framework and moto to mock AWS services.

Test Cases

Test Case 1: No Projects Found in Lookup Table

This test case verifies the behavior when the lookup_table is empty.

@mock_aws
def test_get_project_details_empty_lookup_table(cloudwatch_log_client, ssm_client, dynamodb_resource):
    """Test case when the lookup table is empty."""
    put_parameter_store_config(ssm_client, ENV)

    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)

    create_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)

    with patch('utility.get_db_client') as mock_db_client:
        mock_db_client.return_value = OS_DB_CLIENT
        from main import app
        app.config['TESTING'] = True
        with app.test_client() as client:
            client.set_cookie("user_id", "100")
            create_lookup_table(dynamodb_resource)
            response = client.get('/get-project-details')
            assert response.status_code == 200
            data = response.json
            assert data["data"] == []
            assert "No projects found in lookup table for home page listing" in data["message"]

Test Case 2: Projects Found in Lookup Table

This test case verifies the behavior when the lookup_table contains projects.

@mock_aws
def test_get_project_details_with_data(cloudwatch_log_client, ssm_client, dynamodb_resource):
    """Test case when the lookup table has projects."""
    put_parameter_store_config(ssm_client, ENV)

    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)

    create_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)

    with patch('utility.get_db_client') as mock_db_client:
        mock_db_client.return_value = OS_DB_CLIENT
        from main import app
        app.config['TESTING'] = True
        with app.test_client() as client:
            client.set_cookie("user_id", "100")
            create_lookup_table(dynamodb_resource)
            lookup_resource = dynamodb_resource.Table(LOOKUP_TABLE_NAME)

            # Insert sample data into the lookup table
            lookup_resource.put_item(
                Item={
                    "project_name": "Test Project",
                    "country_code": "US",
                    "generation_name": "Gen1",
                    "model_name": "ModelX",
                    "drive_session_table_name": "TestDriveTable",
                }
            )

            response = client.get('/get-project-details')
            assert response.status_code == 200
            data = response.json
            assert data["data"] != []
            assert "Fetched projects from lookup table" in data["message"]

Test Case 3: Lookup Table Pagination

This test case verifies the behavior when the lookup_table has multiple pages of results.

@mock_aws
def test_get_project_details_with_pagination(cloudwatch_log_client, ssm_client, dynamodb_resource):
    """Test case when the lookup table has multiple pages."""
    put_parameter_store_config(ssm_client, ENV)

    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)

    create_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)

    with patch('utility.get_db_client') as mock_db_client:
        mock_db_client.return_value = OS_DB_CLIENT
        from main import app
        app.config['TESTING'] = True
        with app.test_client() as client:
            client.set_cookie("user_id", "100")
            create_lookup_table(dynamodb_resource)
            lookup_resource = dynamodb_resource.Table(LOOKUP_TABLE_NAME)

            # Insert multiple items to trigger pagination
            for i in range(15):
                lookup_resource.put_item(
                    Item={
                        "project_name": f"Project{i}",
                        "country_code": "US",
                        "generation_name": "Gen1",
                        "model_name": f"Model{i}",
                        "drive_session_table_name": f"DriveTable{i}",
                    }
                )

            response = client.get('/get-project-details')
            assert response.status_code == 200
            data = response.json
            assert len(data["data"]) == 15
            assert "Fetched projects from lookup table" in data["message"]

Test Case 4: Table Not Found Exception

This test case verifies the behavior when the lookup table does not exist.

@mock_aws
def test_get_project_details_table_not_found(cloudwatch_log_client, ssm_client, dynamodb_resource):
    """Test case when the lookup table does not exist."""
    put_parameter_store_config(ssm_client, ENV)

    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)

    create_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)

    with patch('utility.get_db_client') as mock_db_client:
        mock_db_client.return_value = OS_DB_CLIENT
        from main import app
        app.config['TESTING'] = True
        with app.test_client() as client:
            client.set_cookie("user_id", "100")
            # Do not create the lookup table to simulate "table not found"
            response = client.get('/get-project-details')
            assert response.status_code == 404
            data = response.json
            assert "DynamoDB Table" in data["message"]
            assert "ResourceNotFoundException" in data["error_code"]

Test Case 5: General Exception Handling

This test case verifies the behavior when an unexpected error occurs.

@mock_aws
def test_get_project_details_unhandled_exception(cloudwatch_log_client, ssm_client, dynamodb_resource):
    """Test case for an unhandled exception."""
    put_parameter_store_config(ssm_client, ENV)

    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)

    create_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)

    with patch('utility.get_db_client') as mock_db_client:
        mock_db_client.return_value = OS_DB_CLIENT
        from main import app
        app.config['TESTING'] = True
        with app.test_client() as client:
            client.set_cookie("user_id", "100")
            create_lookup_table(dynamodb_resource)

            # Patch the scan method to throw an unexpected exception
            with patch('lookup_table.scan', side_effect=Exception("Unexpected Error")):
                response = client.get('/get-project-details')
                assert response.status_code == 500
                data = response.json
                assert "Unexpected Error" in data["message"]

These test cases ensure comprehensive coverage of the /get-project-details API.
