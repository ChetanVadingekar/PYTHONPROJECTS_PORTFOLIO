from unittest import TestCase
from unittest.mock import patch
from opensearchpy import OpenSearch
from typing import List, Dict

DRIVE_SESSION_INDEX_NAME = "adcp-us-project-01-drive-data"

class TestDriveSessionVehicleUtility(TestCase):
    """
    Test cases for the DriveSessionVehicleUtility class.
    """
    @classmethod
    def setUpClass(cls) -> None:
        cls.client = OpenSearch()
        cluster_info = cls.client.info()
        assert cluster_info["cluster_name"] == "docker-cluster"

    def tearDown(self) -> None:
        if self.client.indices.exists(index=DRIVE_SESSION_INDEX_NAME):
            self.client.indices.delete(index=DRIVE_SESSION_INDEX_NAME)

    @patch("utility.get_db_client")
    def test_create_vehicle_id_query(self, mock_get_db_client):
        """
        Test create_vehicle_id_query method.
        """
        from opensearch_utility import DriveSessionVehicleUtility
        mock_get_db_client.return_value = self.client

        vehicle_utility = DriveSessionVehicleUtility(
            index_name=DRIVE_SESSION_INDEX_NAME, client=self.client
        )
        query = vehicle_utility.create_vehicle_id_query()
        
        expected_query = {
            "size": 0,
            "aggs": {
                "unique_vehicle_ids": {
                    "composite": {
                        "size": 1000,
                        "sources": [{"vehicle_id": {"terms": {"field": "vehicle_id"}}}]
                    }
                }
            }
        }
        self.assertEqual(query, expected_query)

    @patch("utility.get_db_client")
    def test_get_unique_vehicle_ids_with_existing_index(self, mock_get_db_client):
        """
        Test that get_unique_vehicle_ids retrieves distinct vehicle IDs
        when the index exists and contains valid data.
        """
        from opensearch_utility import DriveSessionVehicleUtility
        mock_get_db_client.return_value = self.client

        with patch("opensearch_utility.client.indices.exists") as mock_exists, \
             patch("opensearch_utility.client.search") as mock_search:
            
            mock_exists.return_value = True

            # Sample OpenSearch response for composite aggregation
            mock_search.return_value = {
                "aggregations": {
                    "unique_vehicle_ids": {
                        "buckets": [
                            {"key": {"vehicle_id": "11"}, "doc_count": 2},
                            {"key": {"vehicle_id": "41"}, "doc_count": 19},
                            {"key": {"vehicle_id": "43"}, "doc_count": 13}
                        ]
                    }
                }
            }

            vehicle_utility = DriveSessionVehicleUtility(
                index_name=DRIVE_SESSION_INDEX_NAME, client=self.client
            )
            vehicle_ids = vehicle_utility.get_unique_vehicle_ids()
            self.assertEqual(vehicle_ids, ["11", "41", "43"])

    @patch("utility.get_db_client")
    def test_get_unique_vehicle_ids_with_no_results(self, mock_get_db_client):
        """
        Test that get_unique_vehicle_ids returns an empty list when
        the index exists but no vehicle IDs are found in the search response.
        """
        from opensearch_utility import DriveSessionVehicleUtility
        mock_get_db_client.return_value = self.client

        with patch("opensearch_utility.client.indices.exists") as mock_exists, \
             patch("opensearch_utility.client.search") as mock_search:

            mock_exists.return_value = True
            mock_search.return_value = {
                "aggregations": {
                    "unique_vehicle_ids": {
                        "buckets": []
                    }
                }
            }

            vehicle_utility = DriveSessionVehicleUtility(
                index_name=DRIVE_SESSION_INDEX_NAME, client=self.client
            )
            vehicle_ids = vehicle_utility.get_unique_vehicle_ids()
            self.assertEqual(vehicle_ids, [])

    @patch("utility.get_db_client")
    def test_get_unique_vehicle_ids_with_non_existing_index(self, mock_get_db_client):
        """
        Test that get_unique_vehicle_ids returns an empty list when
        the index does not exist.
        """
        from opensearch_utility import DriveSessionVehicleUtility
        mock_get_db_client.return_value = self.client

        with patch("opensearch_utility.client.indices.exists") as mock_exists:
            mock_exists.return_value = False

            vehicle_utility = DriveSessionVehicleUtility(
                index_name=DRIVE_SESSION_INDEX_NAME, client=self.client
            )
            vehicle_ids = vehicle_utility.get_unique_vehicle_ids()
            self.assertEqual(vehicle_ids, [])

    @patch("utility.get_db_client")
    def test_get_unique_vehicle_ids_with_pagination(self, mock_get_db_client):
        """
        Test that get_unique_vehicle_ids handles pagination when there are more than 1000
        vehicle IDs, requiring multiple queries to retrieve all unique IDs.
        """
        from opensearch_utility import DriveSessionVehicleUtility
        mock_get_db_client.return_value = self.client

        with patch("opensearch_utility.client.indices.exists") as mock_exists, \
             patch("opensearch_utility.client.search") as mock_search:
            
            mock_exists.return_value = True

            # Mock OpenSearch responses to simulate pagination
            mock_search.side_effect = [
                {
                    "aggregations": {
                        "unique_vehicle_ids": {
                            "buckets": [
                                {"key": {"vehicle_id": "11"}, "doc_count": 2},
                                {"key": {"vehicle_id": "41"}, "doc_count": 19}
                            ],
                            "after_key": {"vehicle_id": "41"}
                        }
                    }
                },
                {
                    "aggregations": {
                        "unique_vehicle_ids": {
                            "buckets": [
                                {"key": {"vehicle_id": "42"}, "doc_count": 13},
                                {"key": {"vehicle_id": "43"}, "doc_count": 5}
                            ],
                            "after_key": {"vehicle_id": "43"}
                        }
                    }
                },
                {
                    "aggregations": {
                        "unique_vehicle_ids": {
                            "buckets": [],
                            # No after_key in the last page
                        }
                    }
                }
            ]

            vehicle_utility = DriveSessionVehicleUtility(
                index_name=DRIVE_SESSION_INDEX_NAME, client=self.client
            )
            vehicle_ids = vehicle_utility.get_unique_vehicle_ids()

            # Expected vehicle IDs combined from multiple pages
            expected_vehicle_ids = ["11", "41", "42", "43"]
            self.assertEqual(vehicle_ids, expected_vehicle_ids)
