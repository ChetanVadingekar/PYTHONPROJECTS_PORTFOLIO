def store_query_info(
    user_id: str,
    email_id: str,
    query_text: str,
    query_response: dict,
    page: str,
    status_code: int,
    error_msg: str,
) -> None:
    """
    Store query information into DynamoDB Table.

    Args:
        user_id (str): The user making the request.
        email_id (str): User email id.
        query_text (str): The query executed by the user.
        query_response (dict): The query response against the query.
        page (str): The page from which query was made.
        status_code (int): HTTP status code.
        error_msg (str): error message.
    """
    try:
        ssm_client = client("ssm", region_name=REGION_NAME)
        param_name = f"/{ENV}/DDB/UserQueryInfoTable"
        ssm_response = ssm_client.get_parameter(Name=param_name)
        table_name = ssm_response['Parameter']['Value']
        user_query_info_table = dynamodb.Table(table_name)
        query_id = str(int(datetime.now(timezone.utc).timestamp() * 1000))

        item = {
            "user_id": user_id,
            "query_id": query_id,
            "email_id": email_id,
            "page": page,
            "query_response": {
                "data": query_response.get("data", []),
                "total": query_response.get(
                    "total", len(query_response.get("data", []))
                ),
            },
            "status_code": status_code,
            "query_text": query_text,
        }

        if error_msg:
            item.update({"error_message": error_msg})

        user_query_info_table.put_item(Item=item)  # type: ignore
        logging.info(
            f"Successfully stored query info for query_id: {query_id}"
        )
    except ClientError as e:
        logging.error(f"Error while storing query info {e}")

for the above where we can get the ClientError.
give me those test cases.
