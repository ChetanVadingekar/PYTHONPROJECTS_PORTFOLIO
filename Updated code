def validate_query_params(required_params: list) -> dict:
    """
    Validate query parameters and return them if valid.

    Args:
        required_params (list): List of required query parameter names.

    Returns:
        dict: Dictionary of query parameter values.

    Raises:
        ValueError: If any required parameter is missing.
    """
    params = {param: request.args.get(param) for param in required_params}
    if not all(params.values()):
        raise ValueError("Missing query params in the request")
    return params


def fetch_project_name_table(project_name: str, table_key: str) -> str:
    """
    Fetch the corresponding table name for a project.

    Args:
        project_name (str): The project name.
        table_key (str): The key in the lookup table.

    Returns:
        str: Table name for the project.

    Raises:
        ValueError: If the project or table name is not found.
    """
    lookup_response = lookup_table.scan(
        FilterExpression=boto3.dynamodb.conditions.Attr('project_name').eq(
            project_name
        )
    )
    items = lookup_response.get('Items', [])
    while 'LastEvaluatedKey' in lookup_response:
        lookup_response = lookup_table.scan(
            FilterExpression=boto3.dynamodb.conditions.Attr(
                'project_name'
            ).eq(project_name),
            ExclusiveStartKey=lookup_response['LastEvaluatedKey'],
        )
        items.extend(lookup_response.get('Items', []))

    if not items:
        raise ValueError("Project not found")

    table_name = items[0].get(table_key)
    if not table_name:
        raise ValueError(f"{table_key} not found")
    return table_name


def fetch_filter_attributes(page: str, filter_level: str) -> dict:
    """
    Fetch filter attributes from the filter attributes table.

    Args:
        page (str): Page parameter.
        filter_level (str): Filter level parameter.

    Returns:
        dict: Filter attributes.

    Raises:
        KeyError: If attributes are not found in the table.
    """
    filter_response = filter_attributes_table.get_item(
        Key={'page': page, 'filter_level': filter_level}
    )
    if 'Item' not in filter_response:
        raise KeyError("Filter attributes not found")
    return filter_response['Item']
