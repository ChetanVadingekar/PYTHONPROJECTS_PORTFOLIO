def get_user_email() -> str:
    """
    Retrieve the email associated with current user from AWS Cognito User Pool.

    Returns:
        str: The user email.
    """
    user_id = g.user_id if g.get("user_id") else None
    user_pool_id = get_user_pool_id()

    if not user_id or not user_pool_id:
        return ""
    try:
        cognito_client = boto3.client('cognito-idp', region_name=REGION_NAME)
        cognito_response = cognito_client.admin_get_user(
            UserPoolId=user_pool_id,
            Username=user_id,
        )
        user_attr = cognito_response['UserAttributes']
        return next(
            (attr["Value"] for attr in user_attr if attr["Name"] == "email"),
            "",
        )
    except ClientError as e:
        logging.error(f"Error fetching user data: {e}")
        return ""

i have this function and i have written test case

@mock_aws
def test_get_user_email():
    """Test fetching email associated with a user ID from Cognito User Pool."""

    from utility import get_user_email
    from main import app
    from auth.routes import g

    with patch("utility.get_user_email") as mock_email_address,\
         patch("utility.get_user_pool_id") as mock_get_user_pool_id,\
         patch("utility.boto3.client") as mock_boto_client:

        mock_cognito_client = Mock()
        mock_boto_client.return_value = mock_cognito_client
        mock_cognito_client.admin_get_user.return_value = {
        'UserAttributes': [
            {'Name': 'email', 'Value': 'abc@test.com'}
        ]
    }
        mock_get_user_pool_id.return_value = 'mock_user_pool_id'
        mock_email_address.return_value = 'abc@test.com'

        with app.app_context():
            g.user_id = "mock_user_id"
            result = get_user_email()
            assert result== 'abc@test.com'


similar way i have to write test case for cliet erroe
