@mock_aws
def test_store_query_info_success(ddb_resource):
   """Test storing a successful query response in DynamoDB"""
   from utility import store_query_info
   create_user_query_info_table(ddb_resource)
   table = ddb_resource.Table(USER_QUERY_INFO)
   
   with patch("utility.user_query_info_table", table):
        user_id = "test_123"
        email_id = "test_123@dummy.com"
        query_text = "I want to see snow data"
        page = "event_session"
        status_code = 200
        query_response_time = 3 
        error_msg = ""
        sample_query_response = {     
            "total": 2, 
            "internal_data": "Testing internal data",
            "data": [ 
                { 
                "display_id": "event1",
                "score": "70%"
                }, 
                { 
                "display_id": "event2",
                "score": "65%"
                }
            ]
        }
        store_query_info(
            user_id, 
            email_id, 
            query_text, 
            sample_query_response, 
            page, 
            status_code,
            query_response_time, 
            error_msg
        )
        items = table.scan()["Items"]
        assert len(items) == 1
        stored_item = items[0]
        assert stored_item["user_id"] == user_id
        assert stored_item["email_id"] == email_id
        assert stored_item["query_text"] == query_text
        assert stored_item["page"] == page
        assert stored_item["status_code"] == status_code
        assert stored_item["query_response"]["total"] == 2
        assert stored_item["query_response_time"] == query_response_time
        assert stored_item["error_message"] == error_msg

@mock_aws
def test_store_query_info_with_error_message(ddb_resource):
   """Test storing a query with an error message"""
   from utility import store_query_info
   create_user_query_info_table(ddb_resource)
   table = ddb_resource.Table(USER_QUERY_INFO)
   
   with patch("utility.user_query_info_table", table):
        user_id = "test_123"
        email_id = "test_123@dummy.com"
        query_text = "I want to see snow data"
        page = "drive_session"
        status_code = 400
        error_msg = "Request time out for Honda query API"
        query_response_time = 30.0
        sample_query_response = {}
        store_query_info(
            user_id, 
            email_id, 
            query_text, 
            sample_query_response, 
            page, 
            status_code,
            query_response_time, 
            error_msg
        )
        items = table.scan()["Items"]
        assert len(items) == 1
        stored_item = items[0]
        assert stored_item["user_id"] == user_id
        assert stored_item["email_id"] == email_id
        assert stored_item["query_text"] == query_text
        assert stored_item["page"] == page
        assert stored_item["status_code"] == status_code
        assert stored_item["query_response"]["total"] == 0
        assert stored_item["query_response_time"] == query_response_time
        assert stored_item["error_message"] == error_msg

@mock_aws
def test_store_query_info_logging_on_exception():
   """Test logging when an exception occurs"""
   from utility import store_query_info
   with patch("utility.user_query_info_table.put_item", side_effect=Exception("DynamoDB error")), \
        patch("utility.logging.error") as mock_log_error, \
        patch("utility.log_unstored_query_info_to_cloudwatch") as mock_cloudwatch:
            user_id = "test_123"
            email_id = "test_123@dummy.com"
            query_text = "I want to see snow data"
            page = "drive_session"
            status_code = 400
            query_response_time = 30.0
            error_msg = "Request time out for Honda query API"
            sample_query_response = {     
                "total": 2, 
                "internal_data": "Testing internal data",
                "data": [ 
                    { 
                    "display_id": "event1",
                    "score": "70%"
                    }, 
                    { 
                    "display_id": "event2",
                    "score": "65%"
                    }
                ]
            }
            store_query_info(
                user_id, 
                email_id, 
                query_text, 
                sample_query_response, 
                page, 
                status_code, 
                query_response_time,
                error_msg
            )
            mock_log_error.assert_called_once_with("Error while storing query info DynamoDB error")
            mock_cloudwatch.assert_called_once()


can we optimize the test case like DRY
