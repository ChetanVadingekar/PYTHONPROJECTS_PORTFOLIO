@eventsession_blueprint.route('/api/v1/eventSessions/filters', methods=['GET'])
@cognito_auth_required
@authorization_required(perms={"list:eventSessionsFilters"})
def list_event_session_filters() -> ResponseReturnValue:
    """
    Fetch filter options for filtering EventSession entries

    Returns:
        (ResponseReturnValue): filter options list and status code.
    """
    try:
        page = request.args.get('page')
        filter_level = request.args.get('filter_level')
        project_name = request.args.get('project_name')
        generation = request.args.get('generation')
        lookup_response = lookup_table.scan(
            FilterExpression=boto3.dynamodb.conditions.Attr('project_name').eq(
                project_name
            )
        )

        items = lookup_response['Items']
        while 'LastEvaluatedKey' in lookup_response:
            lookup_response = lookup_table.scan(
                FilterExpression=boto3.dynamodb.conditions.
                Attr('project_name').eq(project_name),
                ExclusiveStartKey=lookup_response['LastEvaluatedKey'],
            )
            items.extend(lookup_response['Items'])

        if not items:
            raise ValueError("Project not found")
        
        for item in items:
            event_session_index_name = (
                item.get("event_session_table_name", "")
            )

        if not event_session_index_name:
            raise ValueError("Event session table name not found")
        
        filter_response = filter_attributes_table.get_item(
            Key={'page': page, 'filter_level': filter_level}
        )

        if 'Item' not in filter_response:
            raise KeyError("Filter attributes not found")

        if generation is not None and generation.isdigit():
            generation = str(float(generation))
        
        common_attributes = filter_response['Item']['common_attributes']
        gen_attributes = filter_response['Item'][
            f'gen_attributes_{generation}'
        ]
        response = {
            **common_attributes,  # type: ignore
            **gen_attributes,  # type: ignore
        }
        final_response = append_vehicle_ids(
            response, 
            event_session_index_name,
            filter_key= "split_status",
            filter_value= "SUCCESS"   
        )
        logging.info(
            f"dynamoDB response for fetching filter "
            f"attributes: {final_response}"
        )
        return (
            jsonify(final_response),  # type: ignore
            200,
        )
    except ValueError as e:
        logging.error(f"Validation Error: {str(e)}")
        return (
            jsonify({'message': str(e)}),
            404,
        )
    except KeyError as e:
        logging.error("KeyError occurred: %s", str(e))
        return (
            jsonify({'message': str(e)}),
            404,
        )
    except botocore.exceptions.ClientError as e:
        logging.error(f"DynamoDB ClientError: {str(e)}")
        return (
            jsonify({'message': "An error occured while querying DynamoDB"}),
            500,
        )
    except Exception as e:
        logging.exception(f"An error occurred: {str(e)}")
        return jsonify({"message": str(e)}), 500


I got this review comment see below,

Please check two cases here:
a. Raise error if generation is None
b. Raise error if generation is not type castable to float
Move this check on the top when to assign the request parameters. That way we can avoid scanning lookup table if the input itslef is wrong.


please update the code 
