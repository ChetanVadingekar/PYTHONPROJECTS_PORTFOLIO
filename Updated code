@mock_aws
@patch('flask_cognito.cognito_auth_required', lambda f: f)
@patch("auth.utils.get_user_management_config",
       Mock(return_value=USER_CONFIG_DETAILS))
@patch("auth.routes.get_user_details")
@patch("auth.routes.current_cognito_jwt", {"sub": "mock_user_id"})
def test_filter_description_api(mock_get_user_details, cloudwatch_log_client,
                                ssm_client, dynamodb_resource):
    """Test description filter"""
    put_parameter_store_config(ssm_client, ENV)

    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)
    create_user_query_info_table(dynamodb_resource)
    query_info_table = dynamodb_resource.Table(USER_QUERY_INFO)
    create_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)
    create_role_info_table(dynamodb_resource)
    add_roles_to_ddb(dynamodb_resource)

    delete_index(index_name=TEST_EVENT_TABLE_NAME)

    with patch('utility.get_db_client') as mock_get_db_client, \
            patch('utility.requests.post') as mock_post, \
            patch('utility.get_filter_attributes_by_generation') \
                    as mock_get_filter_attributes, \
            patch('utility.user_query_info_table', query_info_table):
        mock_get_db_client.return_value = OS_DB_CLIENT
        mock_get_filter_attributes.return_value = ["street_conditions"]
        mock_post.return_value.status_code = 200
        mock_post.return_value.json.return_value = {     
            "total": 3, 
            "internal_data": "Testing internal data",
            "data": [ 
                { 
                "display_id": "test-003",
                "score": "71%"
                }, 
                { 
                "display_id": "test-004",
                "score": "65%"
                },
                { 
                "display_id": "test-002",
                "score": "60%"
                }
            ]
        }

        from main import app
        app.config['TESTING'] = True
        app.config["RoleTable"] = ROLE_TABLE_NAME
        app.extensions = MagicMock()
        app.extensions["cognito_auth"].return_value = "mock_token"
        mock_get_user_details.return_value = {
            "projects": ["test-project"],
            "groups": [],
            "scopes": ROLE_TABLE_ITEMS[0]["scopes"]
        }
        with app.test_client() as client:
            client.set_cookie("user_id", "100")
            create_lookup_table(dynamodb_resource)
            lookup_resource = dynamodb_resource.Table(LOOKUP_TABLE_NAME)
            insert_items_into_lookup_table(lookup_resource)

            create_index(TEST_EVENT_TABLE_NAME, "event")
            insert_data_to_index(TEST_EVENT_TABLE_NAME, "event",
                                 SAMPLE_EVENT_DATA)

            response = client.post(
                f"/fetch-events-by-query?project-name="
                f"{lookup_data[0]['project_name']}&filter_level=L3&generation=1.0",
                data=json.dumps(json.dumps(
                    [
                        {
                            "query": "Test description 2"
                        }
                    ]
                )),
                content_type='application/json'
            )
            total = response.json["total"]
            assert response.status_code == 200
            assert total == 3

            items = query_info_table.scan()["Items"]
            assert len(items) == 1
            stored_item = items[0]
            assert stored_item["user_id"] == "mock_user_id"
            assert stored_item["query_text"] == "Test description 2"
            assert stored_item["status_code"] == 200
            assert stored_item["query_response"]["total"] == 3

    delete_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)

for this test case user_id is not setting it returning None thats why qury info was not stored.

see error

API-Log:main.py:219 {'user_id': None, 'remote_ip': '127.0.0.1', 'source_path': '/fetch-events-by-query', 'request_method': 'POST', 'request_headers': {'User-Agent': 'Werkzeug/3.0.3', 'Host': 'localhost', 'Content-Type': 'application/json', 'Content-Length': '39'}, 'request_endpoint': 'get_events_by_query', 'response_headers': {'Content-Type': 'application/json', 'Content-Length': '7278'}, 'response_status': 200, 'duration': 185.561, 'invoked_time': datetime.datetime(2025, 3, 19, 16, 25, 57, 201932)}

1. Error while storing query info An error occurred (ValidationException) when calling the PutItem operation: One or more parameter values were invalid: Type mismatch for key user_id expected: S actual: NULL

2. assert 0 == 1 
