def log_unstored_query_info_to_cloudwatch(
    user_id: str,
    query_id: str,
    email_id: str,
    query_text: str,
    query_response: dict,
    page: str,
    status_code: int,
    query_response_time: float,
    error_msg: str,
    project_name: str,
) -> None:
    """
    Log unstored query information to Cloudwatch.

    Args:
        user_id (str): The user making the request.
        query_id (str): The query_id is the unique key required for DB.
        email_id (str): User email id.
        query_text (str): The query executed by the user.
        query_response (dict): The query response against the query.
        page (str): The page from which query was made.
        status_code (int): HTTP status code.
        query_response_time (float): response time.
        error_msg (str): error message.
        project_name (str): project_name
    """
    try:
        log_group_name = get_cloudwatch_log_group_name(
            "/CloudWatch/UserQueryInfo/LogGroupName"
        )
        log_stream_name = f"{log_group_name}/{user_id}_{query_id}"

        cloudwatch_handler = watchtower.CloudWatchLogHandler(
            log_group_name=log_group_name,
            log_stream_name=log_stream_name,
            boto3_client=boto3.client("logs", region_name=REGION_NAME),
        )

        request_logger = logging.getLogger("CloudWatchLogger")
        request_logger.setLevel(logging.INFO)
        request_logger.addHandler(cloudwatch_handler)
        log_data = {
            "user_id": user_id,
            "email_id": email_id,
            "query_text": query_text,
            "query_response": query_response,
            "page": page,
            "status_code": status_code,
            "error_message": error_msg,
            "query_response_time": str(query_response_time),
            "internal_data": query_response.get("internal_data", ""),
            "project_name": project_name,
        }
        request_logger.info(json.dumps(log_data))
        logging.info("Logged unstored query information to CloudWatch.")
    except ClientError as e:
        logging.error(f"AWS ClientError while logging to CloudWatch: {e}")
    except Exception as e:
        logging.error(
            f"Error occurred while logging query info to CloudWatch: {e}"
        )


For the above function i want to write a test cases.
please cover all the cases and it should cover all the fucntion lines
