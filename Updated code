{
  "page": {
    "S": "drive_sessions"
  },
  "filter_level": {
    "S": "L2"
  },
  "attributes": {
    "M": {
      "folder_name": {
        "M": {
          "component": {
            "S": "Text"
          },
          "props": {
            "M": {
              "label": {
                "S": "folder_name"
              },
              "variant": {
                "S": "outlined"
              }
            }
          },
          "type": {
            "S": "text"
          }
        }
      },
      "rec_year_month": {
        "M": {
          "component": {
            "S": "DatePicker"
          },
          "props": {
            "M": {
              "format": {
                "S": "YYYY/MM"
              }
            }
          },
          "type": {
            "S": "text"
          }
        }
      },
      "rec_year_month_date": {
        "M": {
          "component": {
            "S": "DatePicker"
          },
          "props": {
            "M": {
              "format": {
                "S": "YYYY/MM/DD"
              }
            }
          },
          "type": {
            "S": "text"
          }
        }
      },
      "rec_year_month_date_range": {
        "M": {
          "component": {
            "S": "DateTimeRangeFilter"
          },
          "db_fields": {
            "L": [
              {
                "S": "rec_year_month_date"
              }
            ]
          },
          "type": {
            "S": "range"
          }
        }
      },
      "tags": {
        "M": {
          "component": {
            "S": "Text"
          },
          "multiple": {
            "S": "true"
          },
          "props": {
            "M": {
              "label": {
                "S": "tags"
              },
              "variant": {
                "S": "outlined"
              }
            }
          },
          "type": {
            "S": "text"
          }
        }
      },
      "vehicle_id": {
        "M": {
          "component": {
            "S": "Text"
          },
          "props": {
            "M": {
              "dropdown_name": {
                "S": "vehicle_id"
              },
              "dropdown_values": {
                "L": []
              },
              "label": {
                "S": "vehicle_id"
              },
              "values": {
                "L": []
              },
              "variant": {
                "S": "outlined"
              },
              "visibility": {
                "BOOL": "true"
              }
            }
          },
          "type": {
            "S": "text"
          }
        }
      }
    }
  }
}

Actuallly earlier we have json data now we have actual ddb data
will this insert function works?

def insert_items_into_filter_attributes_table(table, data, generation):
    table.put_item(
        Item={
            'page': PAGE,
            'filter_level': FILTER_LEVEL,
            'common_attributes': data['common_attributes'],
            f'gen_attributes_{generation}': data[f'gen_attributes_{generation}']
        }
    )


def test_fetch_filter_attributes_with_valid_event_session_filters(ddb_resource):
    """
    Test case for when the Event filter attributes are found and valid.
    """
    from utility import fetch_filter_attributes
    create_filter_attribute_table(ddb_resource)
    filter_table = ddb_resource.Table(FILTER_ATTRIBUTES_TABLE_NAME)
    insert_items_into_filter_attributes_table(
        filter_table,
        SAMPLE_FILTER_DATA_V2,
        "1.0"
    )

    with patch("utility.filter_attributes_table", filter_table):
        result = fetch_filter_attributes(PAGE, FILTER_LEVEL)
        expected_response = {
            "page": "test_page",
            "filter_level": "test_filter_level",
            "common_attributes": {
              "date_time_range": {
                "component": "DateTimeRange",
                "db_fields": [
                  "start_time",
                  "stop_time"
                ],
                "type": "range"
              },
              "event_name": {
                "component": "Text",
                "props": {
                  "label": "event_name",
                  "variant": "outlined"
                },
                "type": "text"
              },
              "folder_name": {
                "component": "Text",
                "props": {
                  "label": "folder_name",
                  "variant": "outlined"
                },
                "type": "text"
              },
              "vehicle_id": {
                "component": "Selection",
                "props": {
                  "dropdown_name": "vehicle_id",
                  "dropdown_values": [],
                  "label": "vehicle_id",
                  "values": [],
                  "variant": "outlined",
                  "visibility": "true"
                },
                "type": "text"
              }
            },
            "gen_attributes_1.0": {
              "day_time": {
                "component": "Selection",
                "props": {
                  "chart_type": "pie",
                  "color_mapping": {
                    "dawn": "#f03775",
                    "day": "#add8e6",
                    "dusk": "#191970",
                    "night": "#391a59"
                  },
                  "dropdown_name": "Day Time",
                  "dropdown_values": [
                    "day",
                    "dawn",
                    "dusk",
                    "night"
                  ],
                  "values": [],
                  "visibility": "true"
                },
                "type": "text"
              },
              "object_classification": {
                "component": "Selection",
                "props": {
                  "chart_type": "bar",
                  "color_mapping": {
                    "default": "#d4d4d4"
                  },
                  "dropdown_name": "Object Classification",
                  "dropdown_values": [
                    "pedestrian",
                    "bicycle",
                    "animal",
                    "small car",
                    "passenger car",
                    "motorbike",
                    "long vehicles (>8m)",
                    "special vehicle"
                  ],
                  "values": [],
                  "visibility": "true"
                },
                "type": "text"
              }
            }
        }   
        assert result == expected_response

do we need to update the test case? 
