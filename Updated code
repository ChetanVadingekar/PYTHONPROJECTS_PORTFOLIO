@mock_aws
def test_get_filter_attributes_v2(cloudwatch_log_client, ssm_client, dynamodb_resource):
    """Test fetching filter attributes version 2."""
    # Mock SSM Parameter Store
    ssm_client.put_parameter(
        Name="/Dev/UserManagement/DDB/UserTable",
        Value="TestUserTable",
        Type="String"
    )
    ssm_client.put_parameter(
        Name="/Dev/UserManagement/DDB/LookupTable",
        Value="TestLookupTable",
        Type="String"
    )

    # Setup DynamoDB mock resources
    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)
    create_cloudwatch_log_group(cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)

    # Start mocking using context managers
    with patch("main.filter_attributes_table") as mock_filter_table, \
         patch("utility.get_db_client") as mock_db_client:

        # Mock DynamoDB behavior
        mock_filter_table.get_item.return_value = {
            "Item": {
                key: deserializer.deserialize(value) for key, value in SAMPLE_FILTER_DATA_V2.items()
            }
        }

        # Mock database client
        mock_db_client.return_value = OS_DB_CLIENT

        # Initialize Flask test client
        from main import app
        app.config['TESTING'] = True
        with app.test_client() as client:
            client.set_cookie("user_id", "100")
            response = client.get('/fetch-filter-attributes-v2',
                                  query_string={
                                      'page': "event_sessions",
                                      'filter_level': "L3",
                                      'generation': "1.0",
                                      'project_name': "us-project-01"
                                  })

            # Log response for debugging
            print("Response:", response.json)

            # Define expected response
            expected_response = {
                'date_time_range': {
                    'component': 'DateTimeRange',
                    'db_fields': ['start_time', 'stop_time'],
                    'type': 'range'
                },
                'event_name': {
                    'component': 'Text',
                    'props': {'label': 'event_name', 'variant': 'outlined'},
                    'type': 'text'
                },
                'day_time': {
                    'component': 'Selection',
                    'props': {
                        'dropdown_name': 'Day Time',
                        'dropdown_values': ['day', 'dawn', 'dusk', 'night'],
                        'values': [],
                        'visibility': 'true',
                        'chart_type': 'pie',
                        'color_mapping': {'day': '#add8e6', 'dawn': '#f03775', 'dusk': '#191970', 'night': '#391a59'}
                    },
                    'type': 'text'
                },
                'object_classification': {
                    'component': 'Selection',
                    'props': {
                        'dropdown_name': 'Object Classification',
                        'dropdown_values': ['pedestrian', 'bicycle', 'animal', 'small car', 'passenger car',
                                            'motorbike', 'long vehicles (>8m)', 'special vehicle'],
                        'values': [],
                        'visibility': 'true',
                        'chart_type': 'bar',
                        'color_mapping': {'default': '#6b8e23'}
                    },
                    'type': 'text'
                }
            }

            # Validate the response
            data = response.json
            assert response.status_code == 200
            assert data == expected_response
