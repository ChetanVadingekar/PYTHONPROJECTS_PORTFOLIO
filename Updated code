@mock_aws
@pytest.mark.usefixtures("dynamodb_resource")
@patch("main.filter_attributes_table")
@patch("main.lookup_table")
def test_get_filter_attributes_v2_is_digit(mock_filter_table, mock_lookup_table, 
                                           cloudwatch_log_client, ssm_client, 
                                           dynamodb_resource):
    """Test fetching filter attributes to check whether generation is digit."""
    print("test-1244", ENV)

    put_parameter_store_config(ssm_client, ENV)
    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)

    create_cloudwatch_log_group(cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)

    with patch('utility.get_db_client') as mock_db_client:
        # Mocking database client
        mock_db_client.return_value = OS_DB_CLIENT

        # Mocking lookup table scan response
        mock_lookup_table.scan.return_value = {
            "Items": [{"drive_session_table_name": "us-project-01"}]
        }

        # Mocking filter attributes table get_item response
        mock_filter_table.get_item.return_value = {
            "Item": {
                key: deserializer.deserialize(value) for key, value in 
                SAMPLE_FILTER_DATA_V2.items()
            }
        }

        # Importing and testing the app
        from main import app
        app.config['TESTING'] = True
        with app.test_client() as client:
            response = client.get('/fetch-filter-attributes-v2',
                                  query_string={
                                      'page': "event_sessions",
                                      'filter_level': "L3",
                                      'generation': "1",  # Ensuring generation is a digit
                                      'project_name': "us-project-01"
                                  })

            # Updated expected response to include 'vehicle_id'
            expected_response = {
                'date_time_range': {
                    'component': 'DateTimeRange',
                    'db_fields': ['start_time', 'stop_time'],
                    'type': 'range'
                },
                'event_name': {
                    'component': 'Text',
                    'props': {
                        'label': 'event_name',
                        'variant': 'outlined'
                    },
                    'type': 'text'
                },
                'vehicle_id': {
                    'component': 'Selection',
                    'props': {
                        'dropdown_name': 'vehicle_id',
                        'dropdown_values': [],  # Vehicle IDs are empty for this case
                        'label': 'vehicle_id',
                        'values': [],
                        'variant': 'outlined',
                        'visibility': 'true'
                    },
                    'type': 'text'
                },
                'day_time': {
                    'component': 'Selection',
                    'props': {
                        'dropdown_name': 'Day Time',
                        'dropdown_values': ['day', 'dawn', 'dusk', 'night'],
                        'values': [],
                        'visibility': 'true',
                        'chart_type': 'pie',
                        'color_mapping': {
                            'day': '#add8e6',
                            'dawn': '#f03775',
                            'dusk': '#191970',
                            'night': '#391a59'
                        }
                    },
                    'type': 'text'
                },
                'object_classification': {
                    'component': 'Selection',
                    'props': {
                        'dropdown_name': 'Object Classification',
                        'dropdown_values': [
                            'pedestrian', 'bicycle', 'animal', 'small car', 
                            'passenger car', 'motorbike', 'long vehicles (>8m)', 
                            'special vehicle'
                        ],
                        'values': [],
                        'visibility': 'true',
                        'chart_type': 'bar',
                        'color_mapping': {'default': '#6b8e23'}
                    },
                    'type': 'text'
                }
            }

            # Assertions
            data = response.json
            assert response.status_code == 200
            assert data == expected_response
