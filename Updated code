def update_event_session_tags() -> ResponseReturnValue:
    """
    Update the tag list for an event session.

    Returns:
        (ResponseReturnValue): A JSON response indicating success or failure.
    """
    try:
        data = request.get_json()
        new_tag_list = data.get('new_tag_list')
        lowercase_tags = set([tag.lower().strip() for tag in new_tag_list])
        project_name = request.args.get("project-name")
        pid = data.get('pid')
        event_id = data.get("id")
        lookup_data = fetch_data_from_lookup_table(project_name=project_name)
        event_table_name = lookup_data[0].get("event_session_table_name")
        event_table = dynamodb.Table(event_table_name)
        response = event_table.update_item(
            Key={"pid": pid, "id": event_id},
            UpdateExpression="SET manual_tags = :mt",
            ExpressionAttributeValues={":mt": lowercase_tags},
        )
        logging.info(
            f"Dynamodb response for updating event session tags info:"
            f" {response}"
        )
        return jsonify({"message": "Tag List updated successfully"}), 200

    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")
        return jsonify({"error": str(e)}), 500


def get_user_email(
    role_code_flag: bool = False,
) -> Union[str, list]:
    """
    Fetch the email and role_code associated with a given \
        user ID from the Cognito User Pool.

    Args:
        role_code_flag (bool): The role code indicating the type of user.

    Returns:
        Union[str, list]: A single email as a\
              string or a list containing one string and one boolean.

    Raises:
        IndexError:If the email attribute is not found in the user's attributes
    """
    user_id = g.get("user_id")
    user_pool_id = get_user_pool_id()

    if not user_id or not user_pool_id:
        return ""
    try:
        cognito_client = boto3.client('cognito-idp', region_name=REGION_NAME)
        cognito_response = cognito_client.admin_get_user(
            UserPoolId=user_pool_id,
            Username=user_id,
        )
    except Exception as e:
        return f"Error fetching user data: {str(e)}"
    user_attr = cognito_response['UserAttributes']
    email_attr = (
        attr['Value'] for attr in user_attr if attr['Name'] == 'email'
    )
    email = next(email_attr, None)
    if email is None:
        raise IndexError("Email attribute not found in user's attributes.")
    if role_code_flag:
        role_code_attr = (
            attr['Value']
            for attr in user_attr
            if attr['Name'] == 'custom:role_code'
        )
        role_code = next(role_code_attr, None)
        if role_code is None:
            raise IndexError(
                "role_code attribute not found in user's attributes."
            )
        response = role_info_table.query(
            KeyConditionExpression=Key('role_code').eq(role_code)
        )
        data = response.get('Items', [])
        admin_authorization = data[0].get('is_admin_role', False)
        return [email, admin_authorization]
    return email
