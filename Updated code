I have one api 

@app.route('/fetch-project-names', methods=['GET'])
@cognito_auth_required
@authorization_required(perms={"list:projects"})
def get_project_names() -> ResponseReturnValue:
    """
    Fetch project names from lookup table.

    Returns:
        (ResponseReturnValue): A JSON response containing the project list.
    """
    try:
        response = lookup_table.scan(
            ProjectionExpression=(
                'project_name,pid,local_file_path,generation_name'
            )
        )
        data = response["Items"]
        if data:
            project_list = [
                {
                    'project_name': item['project_name'],
                    'id': item['pid'],
                    'local_file_path': item.get(
                        'local_file_path', 'Unavailable'
                    ),
                    'generation': item['generation_name'],
                }
                for item in data
            ]
            return jsonify(project_list), 200
        return (
            jsonify(
                {
                    "message": "No projects found. Please create one "
                    "using the CLI"
                }
            ),
            200,
        )
    except Exception as e:
        return jsonify({"message": str(e)}), 500


and we have added authentication and authorization for this api and we written test case for this see below

@mock_aws
def test_fetch_project_names_empty(cloudwatch_log_client,
                                   ssm_client, dynamodb_resource):
    """Fetch project names empty"""
    put_parameter_store_config(ssm_client, ENV)

    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)

    create_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)

    with patch('utility.get_db_client') as mock_db_client:
        mock_db_client.return_value = OS_DB_CLIENT
        from main import app
        app.config['TESTING'] = True
        with app.test_client() as client:
            client.set_cookie("user_id", "100")
            create_lookup_table(dynamodb_resource)
            lookup_resource = dynamodb_resource.Table(LOOKUP_TABLE_NAME)
            response = client.get('/fetch-project-names')
            assert response.status_code == 200
            data = response.json
            assert "No projects found" in data["message"]


now we have one more api see below

@app.route("/get-project-details", methods=["GET"])
@cognito_auth_required
@authorization_required(perms={"list:projectDetails"})
def fetch_projects_info() -> ResponseReturnValue:
    """
    Get the projects information to render on home page.

    Returns:
        (ResponseReturnValue): list of events.
    """
    projection_attributes = [
        "project_name",
        "country_code",
        "generation_name",
        "model_name",
        "drive_session_table_name",
    ]
    try:
        response = lookup_table.scan(
            ProjectionExpression=",".join(projection_attributes)
        )

        projects = response.get("Items", [])

        while response.get("LastEvaluatedKey"):
            response = lookup_table.scan(
                ProjectionExpression=",".join(projection_attributes),
                ExclusiveStartKey=response["LastEvaluatedKey"],
            )
            if response.get("Items"):
                projects.extend(response.get("Items"))  # type: ignore

        if not projects:
            message = "No projects found in lookup table for home page listing"
            logging.info(message)
            return jsonify({"data": [], "message": message}), 200

        response_data = format_project_details(projects)

        return (
            jsonify(
                {
                    "data": response_data,
                    "message": "Fetched projects from lookup table",
                }
            ),
            200,
        )

    except ClientError as err:
        message = err.response['Error']['Message']
        code = err.response['Error']['Code']

        if code == "ResourceNotFoundException":
            message = f"DynamoDB Table {LOOKUP_TABLE} not found"
            logging.error(message)
            status_code = 404
        else:
            logging.error(f"Unhandled Exception: {code}:{message}")
            status_code = 500

        return jsonify({"message": message, "error_code": code}), status_code

so for this api we have to write test cases to cover all the api code
