I have to write a test cases for this below API,

@drivesession_blueprint.route('/api/v1/driveSessions/filters', methods=['GET'])
@cognito_auth_required
@authorization_required(perms={"list:driveSessionsFilters"})
def list_drive_session_filters() -> ResponseReturnValue:
    """
    Fetch filter options from dynamoDB table - version 2.

    Returns:
        (ResponseReturnValue): filter options list and status code.
    """
    try:
        page = request.args.get('page')
        filter_level = request.args.get('filter_level')
        project_name = request.args.get('project_name')
        lookup_response = lookup_table.scan(
            FilterExpression=boto3.dynamodb.conditions.Attr('project_name').eq(
                project_name
            )
        )
        items = lookup_response.get('Items', [])
        drive_session_index_name = ""
        for item in items:
            drive_session_index_name = str(
                item.get("drive_session_table_name", "")
            )
        filter_response = filter_attributes_table.get_item(
            Key={'page': page, 'filter_level': filter_level}
        )
        response = filter_response['Item']['attributes']  # type: ignore
        final_response = append_vehicle_ids(
            response, drive_session_index_name
        )
        logging.info(
            f"dynamoDB response for fetching filter "
            f"attributes: {final_response}"
        )
        return (
            jsonify(final_response),  # type: ignore
            200,
        )
    except KeyError as e:
        logging.error("KeyError occurred: %s", str(e))
        return (
            jsonify({'message': "No generation category information found"}),
            404,
        )
    except Exception as e:
        logging.exception(f"An error occurred: {str(e)}")
        return jsonify({"message": str(e)}), 500


Please refere one the pattern for authentication for test cases see below

@mock_aws
@patch('flask_cognito.cognito_auth_required', lambda f: f)
@patch("auth.utils.get_user_management_config",
       Mock(return_value=USER_CONFIG_DETAILS))
@patch("auth.routes.get_user_details")
@patch("auth.routes.current_cognito_jwt", {"sub": "mock_user_id"})
def test_drive_session_status_no_index_info(mock_get_user_details,
                                           cloudwatch_log_client, ssm_client,
                                           dynamodb_resource):
    """No index name in lookup"""
    put_parameter_store_config(ssm_client, ENV)

    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)

    create_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)
    create_role_info_table(dynamodb_resource)
    add_roles_to_ddb(dynamodb_resource)

    delete_index(TEST_DRIVE_TABLE_NAME)

    with patch('utility.get_db_client') as mock_get_db_client:
        mock_get_db_client.return_value = OS_DB_CLIENT
        from main import app
        app.config['TESTING'] = True
        app.config["RoleTable"] = ROLE_TABLE_NAME
        app.extensions = MagicMock()
        app.extensions["cognito_auth"].return_value = "mock_token"
        mock_get_user_details.return_value = {
            "projects": ["test-project"],
            "groups": [],
            "scopes": ROLE_TABLE_ITEMS[0]["scopes"]
        }
        with app.test_client() as client:
            client.set_cookie("user_id", "100")
            create_lookup_table(dynamodb_resource)

            response = client.get(
                f"/api/v1/driveSessions/status?project-name="
                f"{lookup_data[1]['project_name']}")

            assert response.status_code == 404
            assert response.json["message"] == "No lookup information found " \
                                               f"for the project - {lookup_data[1]['project_name']}."

    delete_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)
