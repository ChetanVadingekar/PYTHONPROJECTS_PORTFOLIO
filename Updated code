I have below API,


@app.route('/fetch-filter-attributes-v2', methods=['GET'])
def get_filter_attributes_v2() -> ResponseReturnValue:
    """
    Fetch filter options from dynamoDB table - version 2.

    Returns:
        (ResponseReturnValue): filter options list and status code.
    """
    try:
        page = request.args.get('page')
        filter_level = request.args.get('filter_level')
        project_name = request.args.get('project_name')
        lookup_response = lookup_table.scan(
            FilterExpression=boto3.dynamodb.conditions.Attr('project_name').eq(project_name)
        )
        items = lookup_response.items('Items', [])
        drive_session_index_name = ""
        for item in items:
            drive_session_index_name = item.get("drive_session_table_name")
        filter_response = filter_attributes_table.get_item(
            Key={'page': page, 'filter_level': filter_level}
        )
        if page == "event_sessions":
            generation = request.args.get('generation')
            if generation is not None and generation.isdigit():
                generation = str(float(generation))
            common_attributes = filter_response['Item']['common_attributes']
            gen_attributes = filter_response['Item'][f'gen_attributes_{generation}']
            response = {
                **common_attributes,  # type: ignore
                **gen_attributes,  # type: ignore
            }
        else:
            response = filter_response['Item']['attributes']  # type: ignore
        logging.info(
            f"dynamoDB response for fetching filter " f"attributes: {response}"
        )
        return (
            jsonify(response),  # type: ignore
            200,
        )
    except KeyError as e:
        logging.error("KeyError occurred: %s", str(e))
        return (
            jsonify({'message': "No generation category information found"}),
            404,
        )
    except Exception as e:
        logging.exception(f"An error occurred: {str(e)}")
        return jsonify({"message": str(e)}), 500


Response:
{
    "rec_year_month": {
        "type": "text",
        "component": "DatePicker",
        "props": {
            "format": "YYYY/MM"
        }
    },
    "folder_name": {
        "type": "text",
        "component": "Text",
        "props": {
            "variant": "outlined",
            "label": "folder_name"
        }
    },
    "rec_year_month_date": {
        "type": "text",
        "component": "DatePicker",
        "props": {
            "format": "YYYY/MM/DD"
        }
    },
    "rec_year_month_date_range": {
        "type": "range",
        "component": "DateTimeRangeFilter",
        "db_fields": [
            "rec_year_month_date"
        ]
    },
    "vehicle_id": {
        "type": "text",
        "component": "Selection",
        "props": {
            "variant": "outlined",
            "dropdown_name": "vehicle_id",
            "label": "vehicle_id",
            "visibility": true,
            "dropdown_values": [],
            "values": []
        }
    },
    "tags": {
        "multiple": "true",
        "component": "Text",
        "type": "text",
        "props": {
            "variant": "outlined",
            "label": "tags"
        }
    }
}

I want to write an utility function to append the vehicle ids into the response of vehicle_id dropdown values.  
Also we have DriveSessionVehicleUtility class which retruns list of vehicle ids or empty list
