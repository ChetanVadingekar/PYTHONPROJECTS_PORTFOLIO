class DriveSessionVehicleUtility:
    """
    A utility class for querying unique vehicle IDs from drive session index.

    Attributes:
        index_name (str): The name of the OpenSearch drive session index.
    """

    def __init__(self: DriveSessionVehicleUtilityVar, index_name: str) -> None:
        """
        Initialize the DriveSessionVehicleUtility.

        Args:
            index_name (str): The name of the OpenSearch drive session index.
        """
        self.index_name = index_name

    def create_vehicle_id_query(
        self: DriveSessionVehicleUtilityVar,
        filter_key: Optional[str] = None,
        filter_value: Optional[str] = None,
        after_key: Optional[dict[str, Any]] = None,
    ) -> dict[str, Any]:
        """
        Create a query to retrieve unique vehicle IDs from the index.

        Args:
            filter_key (Optional[str]): The key to filter by \
                ('current_status' or 'split_status)
            filter_value (Optional[str]): The value for the filter key \
                ('Completed' or 'SUCCESS')
            after_key (optional[dict]): The pagination key for aggregations.

        Returns:
            dict: The OpenSearch query.
        """
        query: dict[str, Any] = {
            "size": 0,
            "aggs": {
                "unique_vehicle_ids": {
                    "composite": {
                        "sources": [
                            {"vehicle_id": {"terms": {"field": "vehicle_id"}}}
                        ],
                        "size": 10000,
                    }
                }
            },
        }

        # Apply the filter only if both key and value are provided
        if filter_key and filter_value:
            query["query"] = {
                "bool": {
                    "must": [{"term": {filter_key: {"value": filter_value}}}]
                }
            }

        if after_key:
            query["aggs"]["unique_vehicle_ids"]["composite"][
                "after"
            ] = after_key
        return query

    def get_unique_vehicle_ids(
        self: DriveSessionVehicleUtilityVar,
        filter_key: Optional[str] = None,
        filter_value: Optional[str] = None,
    ) -> list[str]:
        """
        Execute query to get all unique vehicle IDs from the index.

        Args:
            filter_key (Optional[str]): The key to filter by \
                ('split_status' or 'current_status').
            filter_value (Optional[str]): The value for the filter key \
                ('SUCCESS' or 'Completed').

        Returns:
            list[str]: A list of unique vehicle IDs.
        """
        vehicle_ids: list = []
        after_key = None

        if client.indices.exists(index=self.index_name):
            while True:
                query = self.create_vehicle_id_query(
                    filter_key, filter_value, after_key
                )
                response = client.search(index=self.index_name, body=query)
                buckets = response["aggregations"]["unique_vehicle_ids"][
                    "buckets"
                ]
                vehicle_ids.extend(
                    bucket["key"]["vehicle_id"] for bucket in buckets
                )
                after_key = response["aggregations"]["unique_vehicle_ids"].get(
                    "after_key"
                )
                if not after_key:
                    break
            return vehicle_ids
        return vehicle_ids

I got review comment for the above class where self is being not used in the create vehicle id function 

As self or no instance related entities been accessed. This method can be written as static method. Please check other methods as well and perform wherever applicable.
