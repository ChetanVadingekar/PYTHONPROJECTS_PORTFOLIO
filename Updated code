def test_fetch_project_name_table_with_pagination():
    """
    Test case for handling pagination in the lookup table scan.
    """
    from utility import fetch_project_name_table
    with patch("utility.lookup_table.scan") as mock_table:
        mock_table.side_effect = [
            {
                "Items": [
                    {
                        "project_name": "test_project",
                        "event_session_table_name": "test_event_session_table"
                    }
                ],
                "LastEvaluatedKey": "some_key"
            },
            {
                "Items": [
                    {
                        "project_name": "test_project",
                        "event_session_table_name": "test_event_session_table_2"
                    }
                ]
            }
        ]

        result = fetch_project_name_table("test_project", "event_session_table_name")
        assert result == "test_event_session_table"


def test_fetch_project_name_table_with_missing_project_pagination():
    """
    Test case for when the project is not found in the lookup table with pagination.
    """
    from utility import fetch_project_name_table
    with patch("utility.lookup_table.scan") as mock_table:
        mock_table.side_effect = [
            {
                "Items": [],
                "LastEvaluatedKey": "some_key"
            },
            {
                "Items": []
            }
        ]

        with pytest.raises(KeyError) as key_err:
            fetch_project_name_table("non_existent_project", "event_session_table_name")
        assert str(key_err.value).strip('\'"') == "Project not found"
