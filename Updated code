def store_query_info(
    user_id: str,
    email_id: str,
    query_text: str,
    query_response: dict,
    page: str,
    status_code: int,
    query_response_time: float,
    error_msg: str,
) -> None:
    """
    Store query information into DynamoDB Table.

    Args:
        user_id (str): The user making the request.
        email_id (str): User email id.
        query_text (str): The query executed by the user.
        query_response (dict): The query response against the query.
        page (str): The page from which query was made.
        status_code (int): HTTP status code.
        query_response_time (float): response time.
        error_msg (str): error message.
    """
    if isinstance(query_response_time, (int, float)):
        query_response_time = decimal.Decimal(
            str(query_response_time)
        )  # type:ignore
    else:
        logging.error(
           f"Invalid query response time format: {query_response_time}"
        )
        query_response_time = decimal.Decimal("0.0")  # type:ignore

    try:
        query_id = str(int(datetime.now(timezone.utc).timestamp() * 1000))

        item = {
            "user_id": user_id,
            "query_id": query_id,
            "email_id": email_id,
            "page": page,
            "query_response": {
                "data": query_response.get("data", []),
                "total": query_response.get(
                    "total", len(query_response.get("data", []))
                ),
            },
            "status_code": status_code,
            "query_text": query_text,
            "query_response_time": query_response_time,
            "error_message": error_msg,
            "internal_data": query_response.get("internal_data", ""),
        }
        user_query_info_table.put_item(Item=item)  # type: ignore
        logging.info(
            f"Successfully stored query info for query_id: {query_id}"
        )
    except ClientError as e:
        logging.error(f"DynamoDB ClientError while storing query info {e}")
        log_unstored_query_info_to_cloudwatch(
            user_id,
            query_id,
            email_id,
            query_text,
            query_response,
            page,
            status_code,
            query_response_time,
            error_msg,
        )
    except Exception as e:
        logging.error(f"Error occured while storing query info {e}")
        log_unstored_query_info_to_cloudwatch(
            user_id,
            query_id,
            email_id,
            query_text,
            query_response,
            page,
            status_code,
            query_response_time,
            error_msg,
        )

I have modified the code and i want to write a tets cases which are not written for the above function and update existing test cases also 
please refer existing test cases below

@mock_aws
def test_store_query_info_success(setup_ddb_table, common_test_data):
   """Test storing a successful query response in DynamoDB"""
   from utility import store_query_info
   query_info_table = setup_ddb_table
   with patch("utility.user_query_info_table", query_info_table):
       store_query_info(
           common_test_data["user_id"],
           common_test_data["email_id"],
           common_test_data["query_text"],
           common_test_data["query_response"],
           common_test_data["page"],
           200,
           common_test_data["query_response_time"],
           common_test_data["error_msg"]
       )
       items = query_info_table.scan()["Items"]
       assert len(items) == 1
       stored_item = items[0]
       assert stored_item["user_id"] == common_test_data["user_id"]
       assert stored_item["email_id"] == common_test_data["email_id"]
       assert stored_item["query_text"] == common_test_data["query_text"]
       assert stored_item["page"] == common_test_data["page"]
       assert stored_item["status_code"] == 200
       assert stored_item["query_response"]["total"] == 2
       assert stored_item["query_response_time"] == common_test_data["query_response_time"]
       assert stored_item["error_message"] == common_test_data["error_msg"]

@mock_aws
def test_store_query_info_with_error_message(setup_ddb_table, common_test_data):
   """Test storing a query with an error message"""
   from utility import store_query_info
   query_info_table = setup_ddb_table
   error_data = common_test_data.copy()
   error_data.update({
       "page": "drive_session",
       "status_code": 400,
       "query_response_time": 30.0,
       "error_msg": "Request time out for Honda query API",
       "query_response": {}  
   })
   with patch("utility.user_query_info_table", query_info_table):
       store_query_info(
           error_data["user_id"],
           error_data["email_id"],
           error_data["query_text"],
           error_data["query_response"],
           error_data["page"],
           error_data["status_code"],
           error_data["query_response_time"],
           error_data["error_msg"]
       )
       items = query_info_table.scan()["Items"]
       assert len(items) == 1
       stored_item = items[0]
       assert stored_item["user_id"] == error_data["user_id"]
       assert stored_item["email_id"] == error_data["email_id"]
       assert stored_item["query_text"] == error_data["query_text"]
       assert stored_item["page"] == error_data["page"]
       assert stored_item["status_code"] == error_data["status_code"]
       assert stored_item["query_response"]["total"] == 0
       assert stored_item["query_response_time"] == error_data["query_response_time"]
       assert stored_item["error_message"] == error_data["error_msg"]

@mock_aws
def test_store_query_info_logging_on_exception(common_test_data):
   """Test logging when an exception occurs"""
   from utility import store_query_info
   with patch("utility.user_query_info_table.put_item", side_effect=Exception("DynamoDB error")), \
        patch("utility.logging.error") as mock_log_error, \
        patch("utility.log_unstored_query_info_to_cloudwatch") as mock_cloudwatch:
       store_query_info(
           common_test_data["user_id"],
           common_test_data["email_id"],
           common_test_data["query_text"],
           common_test_data["query_response"],
           "drive_session",
           400,
           30.0,
           "Request time out for Honda query API"
       )
       mock_log_error.assert_called_once_with("Error while storing query info DynamoDB error")
       mock_cloudwatch.assert_called_once()

