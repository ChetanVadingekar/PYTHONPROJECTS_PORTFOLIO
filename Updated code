@app.route('/fetch-filter-attributes-v2', methods=['GET'])
def get_filter_attributes_v2() -> ResponseReturnValue:
    """
    Fetch filter options from dynamoDB table - version 2.

    Returns:
        (ResponseReturnValue): filter options list and status code.
    """
    try:
        page = request.args.get('page')
        filter_level = request.args.get('filter_level')
        project_name = request.args.get('project_name')
        lookup_response = lookup_table.scan(
            FilterExpression=boto3.dynamodb.conditions.Attr('project_name').eq(
                project_name
            )
        )
        items = lookup_response.get('Items', [])
        drive_session_index_name = ""
        for item in items:
            drive_session_index_name = str(
                item.get("drive_session_table_name", "")
            )
        filter_response = filter_attributes_table.get_item(
            Key={'page': page, 'filter_level': filter_level}
        )
        if page == "event_sessions":
            generation = request.args.get('generation')
            if generation is not None and generation.isdigit():
                generation = str(float(generation))
            common_attributes = filter_response['Item']['common_attributes']
            gen_attributes = filter_response['Item'][
                f'gen_attributes_{generation}'
            ]
            response = {
                **common_attributes,  # type: ignore
                **gen_attributes,  # type: ignore
            }
            final_response = append_vehicle_ids(
                response, drive_session_index_name
            )
        else:
            response = filter_response['Item']['attributes']  # type: ignore
            final_response = append_vehicle_ids(
                response, drive_session_index_name
            )
        logging.info(
            f"dynamoDB response for fetching filter "
            f"attributes: {final_response}"
        )
        return (
            jsonify(final_response),  # type: ignore
            200,
        )
    except KeyError as e:
        logging.error("KeyError occurred: %s", str(e))
        return (
            jsonify({'message': "No generation category information found"}),
            404,
        )
    except Exception as e:
        logging.exception(f"An error occurred: {str(e)}")
        return jsonify({"message": str(e)}), 500

I have wriiten one test case for this api see below,

@mock_aws
def test_get_filter_attributes_v2_new(ssm_client, cognito_client, cloudwatch_log_client, dynamodb_resource):
    """Test fetching filter attributes version 2."""
    
    client, user_pool_id = cognito_client
    put_parameter_store_config(ssm_client, ENV, user_pool_id)
    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)
    create_cloudwatch_log_group(cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)
   
    with patch("main.filter_attributes_table") as mock_filter_table, \
         patch("utility.get_db_client") as mock_db_client:

        mock_filter_table.get_item.return_value = {
            "Item": {
                key: deserializer.deserialize(value) for key, value in SAMPLE_FILTER_DATA_V2.items()
            }
        }

        mock_db_client.return_value = OS_DB_CLIENT

        from main import app
        app.config['TESTING'] = True
        with app.test_client() as client:
            client.set_cookie("user_id", "100")
            response = client.get('/fetch-filter-attributes-v2',
                                  query_string={
                                      'page': "event_sessions",
                                      'filter_level': "L3",
                                      'generation': "1.0",
                                      'project_name': "us-project-01"
                                  })

            print("Response:", response.json)

            expected_response = {
                'date_time_range': {
                    'component': 'DateTimeRange',
                    'db_fields': ['start_time', 'stop_time'],
                    'type': 'range'
                },
                'event_name': {
                    'component': 'Text',
                    'props': {'label': 'event_name', 'variant': 'outlined'},
                    'type': 'text'
                },
                'day_time': {
                    'component': 'Selection',
                    'props': {
                        'dropdown_name': 'Day Time',
                        'dropdown_values': ['day', 'dawn', 'dusk', 'night'],
                        'values': [],
                        'visibility': 'true',
                        'chart_type': 'pie',
                        'color_mapping': {'day': '#add8e6', 'dawn': '#f03775', 'dusk': '#191970', 'night': '#391a59'}
                    },
                    'type': 'text'
                },
                'object_classification': {
                    'component': 'Selection',
                    'props': {
                        'dropdown_name': 'Object Classification',
                        'dropdown_values': ['pedestrian', 'bicycle', 'animal', 'small car', 'passenger car',
                                            'motorbike', 'long vehicles (>8m)', 'special vehicle'],
                        'values': [],
                        'visibility': 'true',
                        'chart_type': 'bar',
                        'color_mapping': {'default': '#6b8e23'}
                    },
                    'type': 'text'
                }
            }


            data = response.json
            assert response.status_code == 200
            assert data == expected_response

but i am getting error as tests/test_main.py::test_get_filter_attributes_v2_new - TypeError: argument of type 'NoneType' is not iterable

also do we need to patch lookup table? if yes please patch it.

also i have updated the SAMPLE_FILTER_DATA_V2 see below,

SAMPLE_FILTER_DATA_V2 = {
  "page": {
    "S": "event_sessions"
  },
  "filter_level": {
    "S": "L3"
  },
  "common_attributes": {
    "M": {
      "date_time_range": {
        "M": {
          "component": {
            "S": "DateTimeRange"
          },
          "db_fields": {
            "L": [
              {
                "S": "start_time"
              },
              {
                "S": "stop_time"
              }
            ]
          },
          "type": {
            "S": "range"
          }
        }
      },
      "event_name": {
        "M": {
          "component": {
            "S": "Text"
          },
          "props": {
            "M": {
              "label": {
                "S": "event_name"
              },
              "variant": {
                "S": "outlined"
              }
            }
          },
          "type": {
            "S": "text"
          }
        }
      },
      "vehicle_id": {
        "M": {
          "component": {
            "S": "Selection"
          },
          "props": {
            "M": {
              "dropdown_name": {
                "S": "vehicle_id"
              },
              "dropdown_values": {
                "L": []
              },
              "label": {
                "S": "vehicle_id"
              },
              "values": {
                "L": []
              },
              "variant": {
                "S": "outlined"
              },
              "visibility": {
                "BOOL": "true"
              }
            }
          },
          "type": {
            "S": "text"
          }
        }
      }
    }
  },
  "gen_attributes_1.0": {
    "M": {
      "day_time": {
        "M": {
          "component": {
            "S": "Selection"
          },
          "props": {
            "M": {
              "dropdown_name": {
                "S": "Day Time"
              },
              "dropdown_values": {
                "L": [
                  {
                    "S": "day"
                  },
                  {
                    "S": "dawn"
                  },
                  {
                    "S": "dusk"
                  },
                  {
                    "S": "night"
                  }
                ]
              },
              "values": {
                "L": []
              },
              "visibility": {
                "BOOL": "true"
              },
              "chart_type": {
                "S": "pie"
              },
              "color_mapping": {
                "M": {
                  "day": {
                    "S": "#add8e6"
                  },
                  "dawn": {
                    "S": "#f03775"
                  },
                  "dusk": {
                    "S": "#191970"
                  },
                  "night": {
                    "S": "#391a59"
                  }
                }
              }
            }
          },
          "type": {
            "S": "text"
          }
        }
      },
      "object_classification": {
        "M": {
          "component": {
            "S": "Selection"
          },
          "props": {
            "M": {
              "dropdown_name": {
                "S": "Object Classification"
              },
              "dropdown_values": {
                "L": [
                  {
                    "S": "pedestrian"
                  },
                  {
                    "S": "bicycle"
                  },
                  {
                    "S": "animal"
                  },
                  {
                    "S": "small car"
                  },
                  {
                    "S": "passenger car"
                  },
                  {
                    "S": "motorbike"
                  },
                  {
                    "S": "long vehicles (>8m)"
                  },
                  {
                    "S": "special vehicle"
                  }
                ]
              },
              "values": {
                "L": []
              },
              "visibility": {
                "BOOL": "true"
              },
              "chart_type": {
                "S": "bar"
              },
              "color_mapping": {
                "M": {
                  "default": {
                    "S": "#6b8e23"
                  }
                }
              }
            }
          },
          "type": {
            "S": "text"
          }
        }
      }
    }
  },
  "gen_attributes_3.0": {
    "M": {
      "day_time": {
        "M": {
          "component": {
            "S": "Selection"
          },
          "props": {
            "M": {
              "dropdown_name": {
                "S": "Day Time"
              },
              "dropdown_values": {
                "L": [
                  {
                    "S": "day"
                  },
                  {
                    "S": "dusk/dawn"
                  },
                  {
                    "S": "night"
                  }
                ]
              },
              "values": {
                "L": []
              },
              "visibility": {
                "BOOL": "true"
              },
              "chart_type": {
                "S": "pie"
              },
              "color_mapping": {
                "M": {
                  "day": {
                    "S": "#add8e6"
                  },
                  "dusk/dawn": {
                    "S": "#f03775"
                  },
                  "night": {
                    "S": "#191970"
                  }
                }
              }
            }
          },
          "type": {
            "S": "text"
          }
        }
      },
      "lane_features": {
        "M": {
          "component": {
            "S": "Selection"
          },
          "props": {
            "M": {
              "dropdown_name": {
                "S": "Lane Features"
              },
              "dropdown_values": {
                "L": [
                  {
                    "S": "long slope"
                  },
                  {
                    "S": "road merging"
                  },
                  {
                    "S": "sa/pa"
                  },
                  {
                    "S": "ramp/jct/ic"
                  },
                  {
                    "S": "another lane(parallel/overlap)"
                  },
                  {
                    "S": "roundabout"
                  },
                  {
                    "S": "stacked roads"
                  },
                  {
                    "S": "crossroad/intersection"
                  },
                  {
                    "S": "ramp fork"
                  },
                  {
                    "S": "slight angle"
                  },
                  {
                    "S": "reversible lane/zipper lane"
                  },
                  {
                    "S": "underpass"
                  },
                  {
                    "S": "curve sign w/reduce speed"
                  },
                  {
                    "S": "concrete lane/cobblestone"
                  },
                  {
                    "S": "carpool lane"
                  }
                ]
              },
              "values": {
                "L": []
              },
              "visibility": {
                "BOOL": "true"
              },
              "chart_type": {
                "S": "bar"
              },
              "color_mapping": {
                "M": {
                  "default": {
                    "S": "#6b8e23"
                  }
                }
              }
            }
          },
          "type": {
            "S": "text"
          }
        }
      }
    }
  }
}
