def fetch_filter_attributes(page: str, filter_level: str) -> dict:
    """
    Fetch filter attributes from the filter attributes table.

    Args:
        page (str): Page parameter.
        filter_level (str): Filter level parameter.

    Returns:
        dict: Filter attributes.

    Raises:
        KeyError: If attributes are not found in the table.
    """
    filter_response = filter_attributes_table.get_item(
        Key={'page': page, 'filter_level': filter_level}
    )
    if 'Item' not in filter_response:
        raise KeyError("Filter attributes not found")
    return filter_response['Item']

I have this function and want to write test cases

@pytest.fixture(scope="function")
def dynamodb_resource(aws_credentials):
    """Creates a boto3 dynamodb resource."""
    with mock_aws():
        resource = boto3.resource("dynamodb", region_name="ap-northeast-1")
        yield resource

def create_filter_attribute_table(ddb_resource):
    """Create DynamoDB filter attribute Table"""
    ddb_resource.create_table(
        AttributeDefinitions=[
            {
                "AttributeName": "page",
                "AttributeType": "S"
            },
            {
                "AttributeName": "filter_level",
                "AttributeType": "S"
            }
        ],
        TableName=FILTER_ATTRIBUTES_TABLE_NAME,
        KeySchema=[
            {
                "AttributeName": "page",
                "KeyType": "HASH"
            },
            {
                "AttributeName": "filter_level",
                "KeyType": "RANGE"
            }
        ],
        BillingMode="PAY_PER_REQUEST"
    )


def insert_items_into_filter_attributes_table(table, data, generation):
    table.put_item(
        Item={
            'page': PAGE,
            'filter_level': FILTER_LEVEL,
            'common_attributes': data['common_attributes'],
            f'gen_attributes_{generation}': data[f'gen_attributes_{generation}']
        }
    )


def insert_items_into_filter_attribute_drivesession_table(table, data):
    table.put_item(
        Item={
            'page': PAGE,
            'filter_level': FILTER_LEVEL,
            'attributes': data['attributes']
        }
    )


