@app.route('/users', methods=['GET'])
@cognito_auth_required
@authorization_required(perms={"list:users"})
def list_user() -> ResponseReturnValue:
    """
    List users based on project selected from DynamoDB.

    Returns:
        (ResponseReturnValue): JSON response with List of users and message.

    Raises:
        response: If an error occurs while processing the request.
    """
    project = request.args.get('projectselected')
    if not project:
        return (
            jsonify({'message': 'Project not specified', 'users': []}),
            400,
        )

    try:
        page_no = int(request.args.get('page_no', 1))
        page_size = int(request.args.get('page_size', 10))
        user_id = request.args.get('userid')
        start_index = (page_no - 1) * page_size
        end_index = page_no * page_size
        total_user_response = []
        response = user_info_table_cognito.query(
            IndexName="project_name-user_id-index",
            KeyConditionExpression=boto3.dynamodb.conditions.Key(
                'project_name'
            ).eq(project),
            FilterExpression="account_status = :val",
            ExpressionAttributeValues={":val": True},
        )
        if isinstance(response, ClientError):
            raise response
        total_user_response.extend(response["Items"])
        while 'LastEvaluatedKey' in response:
            logging.info("Fetching the remaining results ...")
            print("Fetching the remaining results ...")
            response = user_info_table_cognito.query(
                IndexName="project_name-user_id-index",
                KeyConditionExpression=boto3.dynamodb.conditions.Key(
                    'project_name'
                ).eq(project),
                FilterExpression="account_status = :val",
                ExpressionAttributeValues={":val": True},
                ExclusiveStartKey=response['LastEvaluatedKey'],
            )
            total_user_response.extend(response["Items"])
        users_response = get_user_data(total_user_response, project)
        users = users_response["users"]
        if users_response["code"] == 400:
            return (users_response["msg"], 400)
        filtered_users = [user for user in users if user['uid'] != user_id]
        paginated_users = filtered_users[start_index:end_index]
        if paginated_users:
            return (
                jsonify(
                    {
                        'data': paginated_users,
                        'message': '',
                        'total': len(filtered_users),
                    }
                ),
                200,
            )
        return (
            jsonify(
                {
                    'message': f'No users found for project {project}',
                    'data': [],
                    'total': len(filtered_users),
                }
            ),
            404,
        )
    except ClientError as e:
        return (
            jsonify({'message': f"Error: {e.response['Error']['Message']}"}),
            500,
        )
    except Exception as e:
        logging.exception(f"An error occurred: {str(e)}")
        return (
            jsonify(
                {
                    "message": "An error occurred while processing the "
                    "request."
                }
            ),
            500,
        )

def get_user_data(response: list, project: str) -> dict:
    """
    Process a user and return user data if conditions are met.

    Parameters:
        response (list): A dictionary containing user.
        project (str): The project to check against the project list.

    Returns:
        dict: A dictionary containing user information.
    """
    users = []
    project_list = []
    project_flag = "project_name"
    for user in response:
        attributes = {}
        for attribute, value in user.items():
            attributes[attribute] = value
        if project_flag in attributes:
            project_list = [
                proj.strip("' ")
                for proj in attributes[project_flag].split(',')
            ]
        role_info = get_role_type(attributes['role_code'])
        if 'error' in role_info:
            return {
                "users": [],
                "msg": jsonify({'message': role_info['error']}),
                "code": 400,
            }
        role_name = role_info.get("role_name", "unknown")
        role_type = role_info.get("role_type", "unknown")
        users.append(
            {
                "uid": attributes.get('user_id', 'unknown'),
                "name": attributes.get('name', 'unknown'),
                "emp_id": attributes.get('emp_id', 'unknown'),
                "email": attributes.get('email', 'unknown'),
                "upn": attributes.get('upn', 'unknown'),
                "projects": project_list,
                "role_name": role_name,
                "role_type": role_type,
            }
        )
    return {
        "users": users,
        "msg": jsonify({'message': "Success"}),
        "code": 200,
    }


I want to Review the above code.
Please review and give me suggestion what can be improved so that code can be resilient and moduler 
