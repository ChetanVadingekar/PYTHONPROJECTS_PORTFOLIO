reference test case class see below,

class TestOpenSearchDriveSessionUtility(TestCase):
    """
    Test cases for the OpenSearchDriveSessionUtility class.
    """
    @classmethod
    def setUpClass(cls) -> None:
        cls.client = OS_DB_CLIENT
        cluster_info = cls.client.info()
        assert cluster_info["cluster_name"] == "docker-cluster"
        
    def tearDown(self) -> None:
        if self.client.indices.exists(index=DRIVE_SESSION_INDEX_NAME):
            self.client.indices.delete(index=DRIVE_SESSION_INDEX_NAME)

    @mock_aws
    @patch('utility.get_db_client')
    def test_create_query(self, mock_get_db_client):
        """
        Test create_query method.
        """
        mock_get_db_client.return_value = self.client
        from opensearch_utility import DriveSessionUtility

        drive_utility = DriveSessionUtility(index_name=DRIVE_SESSION_INDEX_NAME)

        query = drive_utility.create_query()
        print(f"query: {query}")
        self.assertEqual(query, {'size': 1, '_source': ['rec_year_month_date'], 'sort': [{'rec_year_month_date': {'order': 'desc'}}], 'query': {'match_all': {}}}
                        )
    
    @mock_aws
    @patch('utility.get_db_client')
    def test_get_rec_year_month_date_with_existing_index(self, mock_get_db_client):
        """
        Test that the get_rec_year_month_date method retrieves the most recent
        'rec_year_month_date' from an existing index when the index exists and 
        contains valid data.
        """
        from opensearch_utility import DriveSessionUtility
        mock_get_db_client.return_value = self.client
        with patch("opensearch_utility.client.indices.exists") as mock_exists, \
             patch("opensearch_utility.client.search") as mock_search:

            mock_exists.return_value = True

            mock_search.return_value = {
                'hits': {
                    'hits': [
                        {
                            '_source': {
                                'rec_year_month_date': '20240115'
                            }
                        }
                    ]
                }
            }

            utility = DriveSessionUtility(index_name=DRIVE_SESSION_INDEX_NAME)            
            rec_date = utility.get_rec_year_month_date()
            self.assertEqual(rec_date, "20240115")

    @mock_aws
    @patch('utility.get_db_client')
    def test_get_rec_year_month_date_with_no_date(self, mock_get_db_client):
        """
        Test that the get_rec_year_month_date method returns 'NA' when the index exists,
        but no 'rec_year_month_date' is found in the search response.
        """
        from opensearch_utility import DriveSessionUtility
        mock_get_db_client.return_value = self.client
        with patch("opensearch_utility.client.indices.exists") as mock_exists, \
             patch("opensearch_utility.client.search") as mock_search:

            mock_exists.return_value = True

            mock_search.return_value = {
                'hits': {
                    'hits': []
                }
            }
            utility = DriveSessionUtility(index_name=DRIVE_SESSION_INDEX_NAME)
            rec_date = utility.get_rec_year_month_date()
            self.assertEqual(rec_date, "Unavailable")

    @mock_aws
    @patch('utility.get_db_client')
    def test_get_rec_year_month_date_with_non_existing_index(self, mock_get_db_client):
        ""
        Test that the get_rec_year_month_date method returns 'NA' when the index does
        not exist (i.e., the index is not found in OpenSearch).
        """
        from opensearch_utility import DriveSessionUtility
        mock_get_db_client.return_value = self.client

        with patch("opensearch_utility.client.indices.exists") as mock_exists:
            mock_exists.return_value = False
            utility = DriveSessionUtility(index_name=DRIVE_SESSION_INDEX_NAME)
            rec_date = utility.get_rec_year_month_date()
            self.assertEqual(rec_date, "Unavailable")


As you have given the drivesessionvehicleutility class please write test class for that please refer above class.
