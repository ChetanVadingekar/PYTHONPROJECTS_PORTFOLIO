API Refactoring

@app.route('/fetch-events-for-listing', methods=['POST', 'GET'])
def get_events_from_dynamodb() -> ResponseReturnValue:
    """
    Get event data based on split_status from the database.

    Returns:
        (ResponseReturnValue): list of events.
    """
    try:
        input_json: Any = [{"split_status": ["SUCCESS"]}]
        page = request.args.get('page')
        filter_level = request.args.get('filter_level')
        generation = request.args.get('generation')
        api = "fetch-events-for-listing"
        if request.method == "POST" and request.is_json:
            # Generate filter expressions
            input_json = json.loads(request.get_json())
            input_json = update_query_with_default_data(
                input_json, page, filter_level, generation, api
            )

        user_id = g.user_id if g.get("user_id") else None
        project_name = request.args.get("project-name")
        page_type = request.args.get("page-type")
        sortby = request.args.get(
            "sortby", ["rec_year_month_date", "start_time"]
        )
        page_no = int(request.args.get("page-number", 1))
        page_size = int(request.args.get("page-size", 10000))

        # Call the common utility for OpenSearch execution
        response = handle_opensearch_query(
            input_json=input_json,
            project_name=project_name,
            page_no=page_no,
            page_size=page_size,
            page_type=page_type,
            sortby=sortby,
            user_id=user_id,
            gen3_coordinates=gen3_coordinates,
        )

        if response["data"] is None:
            return (
                jsonify({"message": response["message"]}),
                response["status"],
            )

        return jsonify(response), 200

    except KeyError as e:
        logging.exception(e)
        return (
            jsonify({"message": "Parsing the query results failed."}),
            404,
        )
    except IndexError as e:
        logging.error("Error occurred: %s", str(e))
        return (
            jsonify(
                {
                    'message': f"No lookup information found for the "
                    f"project - {project_name}."
                }
            ),
            404,
        )
    except Exception as e:
        logging.exception(f"An error occurred: {str(e)}")
        return (
            jsonify(
                {
                    "message": "An error occurred while processing the "
                    "request."
                }
            ),
            500,
        )


For the above API we need do refactorization to make it as per the new endpoint see below  

list:eventSessionsCard
List all available event sessions
(page-type=event_sessions)
GET
old endpoint /fetch-events-for-listing
GET
new endpoint /api/v1/eventSessions

read:eventSessionsCard
View details of one particular drive session
(page-type=event_sessions)
POST
old endpoint /fetch-events-for-listing
POST
new endpoint /api/v1/eventSessions/:id

list:eventSessionsTrajectory
List trajectories of all drive sessions
(page-type=map_summary)
GET
old endpoint /fetch-events-for-listing
GET
new endpoint /api/v1/eventSessions/trajectory

