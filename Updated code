for the below test case it run successfully without any issues

@mock_aws
@patch('flask_cognito.cognito_auth_required', lambda f: f)
@patch("auth.utils.get_user_management_config",
       Mock(return_value=USER_CONFIG_DETAILS))
@patch("auth.routes.get_user_details")
@patch("auth.routes.current_cognito_jwt", {"sub": "mock_user_id"})
def test_drive_session_cards_no_filter(mock_get_user_details,
                                       cloudwatch_log_client, ssm_client,
                                       dynamodb_resource):
    """Drive session: Fetch request without any filters"""
    put_parameter_store_config(ssm_client, ENV)

    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)

    create_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)
    create_role_info_table(dynamodb_resource)
    add_roles_to_ddb(dynamodb_resource)

    delete_index(TEST_DRIVE_TABLE_NAME)

    with patch('utility.get_db_client') as mock_get_db_client:
        mock_get_db_client.return_value = OS_DB_CLIENT
        from main import app
        app.config['TESTING'] = True
        app.config["RoleTable"] = ROLE_TABLE_NAME
        app.extensions = MagicMock()
        app.extensions["cognito_auth"].return_value = "mock_token"
        mock_get_user_details.return_value = {
            "projects": ["test-project"],
            "groups": [],
            "scopes": ROLE_TABLE_ITEMS[0]["scopes"]
        }
        with app.test_client() as client:
            client.set_cookie("user_id", "100")
            create_lookup_table(dynamodb_resource)
            lookup_resource = dynamodb_resource.Table(LOOKUP_TABLE_NAME)
            insert_items_into_lookup_table(lookup_resource)

            create_index(TEST_DRIVE_TABLE_NAME, "drive")
            insert_data_to_index(TEST_DRIVE_TABLE_NAME, "drive",
                                 SAMPLE_DRIVE_DATA)

            response = client.get(
                f"/api/v1/driveSessions?project-name="
                f"{lookup_data[0]['project_name']}")

            total = response.json["total"]

            assert response.status_code == 200
            assert total == 2


but for this below test case we are getting fee issue please try to solve

@mock_aws
@patch('flask_cognito.cognito_auth_required', lambda f: f)
@patch("auth.utils.get_user_management_config",
       Mock(return_value=USER_CONFIG_DETAILS))
@patch("auth.routes.get_user_details")
@patch("auth.routes.current_cognito_jwt", {"sub": "mock_user_id"})
def test_list_drive_session_filters_(mock_get_user_details,
                                       cloudwatch_log_client, ssm_client,
                                       dynamodb_resource):
    """Test successful retrieval of drive session filters"""
    put_parameter_store_config(ssm_client, ENV)

    create_users_table(dynamodb_resource)
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)

    create_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)
    create_role_info_table(dynamodb_resource)
    add_roles_to_ddb(dynamodb_resource)
    delete_index(TEST_DRIVE_TABLE_NAME)

    with patch('utility.get_db_client') as mock_get_db_client:
        mock_get_db_client.return_value = OS_DB_CLIENT
        from main import app
        app.config['TESTING'] = True
        app.config["RoleTable"] = ROLE_TABLE_NAME
        app.extensions = MagicMock()
        app.extensions["cognito_auth"].return_value = "mock_token"
        mock_get_user_details.return_value = {
            "projects": ["test-project"],
            "groups": [],
            "scopes": ROLE_TABLE_ITEMS[0]["scopes"]
        }
        with app.test_client() as client:
            client.set_cookie("user_id", "100")
            create_lookup_table(dynamodb_resource)
            lookup_resource = dynamodb_resource.Table(LOOKUP_TABLE_NAME)
            insert_items_into_lookup_table(lookup_resource)

            create_filter_attribute_table(dynamodb_resource)
            filter_table = dynamodb_resource.Table(FILTER_ATTRIBUTES_TABLE_NAME)
            insert_items_into_filter_attribute_drivesession_table(
                filter_table,
                SAMPLE_FILTER_DRIVE_DATA
            )

            create_index(TEST_DRIVE_TABLE_NAME, "drive")
            insert_data_to_index(TEST_DRIVE_TABLE_NAME, "drive",
                                 SAMPLE_DRIVE_DATA)
            response = client.get('/api/v1/driveSessions/filters',
                                  query_string={
                                    'page': "drive_sessions",
                                    'filter_level': "L2",
                                    'project_name': (f"{lookup_data[0]['project_name']}")
                                })

            expected_response = {
                'folder_name': {
                    'component': 'Text', 
                    'props': {
                        'label': 'folder_name', 
                        'variant': 'outlined'
                        }, 
                    'type': 'text'
                    }, 
                'rec_year_month': {
                    'component': 'DatePicker', 
                    'props': {
                        'format': 'YYYY/MM'
                        }, 
                    'type': 'text'
                    }, 
                'rec_year_month_date': {
                    'component': 'DatePicker', 
                    'props': {
                        'format': 'YYYY/MM/DD'
                        }, 
                    'type': 'text'
                    }, 
                'rec_year_month_date_range': {
                    'component': 'DateTimeRangeFilter', 
                    'db_fields': ['rec_year_month_date'], 
                    'type': 'range'
                    }, 
                    'tags': {
                        'component': 'Text', 
                        'multiple': 'true', 
                        'props': {
                            'label': 'tags', 
                            'variant': 'outlined'
                            }, 
                    'type': 'text'
                    }, 
                'vehicle_id': {
                    'component': 'Text', 
                    'props': {
                        'dropdown_name': 'vehicle_id',
                        'dropdown_values': [], 
                        'label': 'vehicle_id', 
                        'values': [], 
                        'variant': 'outlined', 
                        'visibility': 'true'
                        }, 
                    'type': 'text'
                    }
                }

            data = response.json
            print(f"data: {data}")
            assert response.status_code == 200
            assert data == expected_response

    delete_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)


Errors see below which we are getting 

mock_get_user_details = <MagicMock name='get_user_details' id='139741804452544'>
cloudwatch_log_client = <botocore.client.CloudWatchLogs object at 0x7f182cf6fd90>
ssm_client = <botocore.client.SSM object at 0x7f182ca7caf0>
dynamodb_resource = dynamodb.ServiceResource()

    @mock_aws
    @patch('flask_cognito.cognito_auth_required', lambda f: f)
    @patch("auth.utils.get_user_management_config",
           Mock(return_value=USER_CONFIG_DETAILS))
    @patch("auth.routes.get_user_details")
    @patch("auth.routes.current_cognito_jwt", {"sub": "mock_user_id"})
    def test_list_drive_session_filters_(mock_get_user_details,
                                           cloudwatch_log_client, ssm_client,
                                           dynamodb_resource):
        """Test successful retrieval of drive session filters"""
        put_parameter_store_config(ssm_client, ENV)
    
        create_users_table(dynamodb_resource)
        user_table = dynamodb_resource.Table(USER_TABLE_NAME)
        insert_items_into_users_table(user_table)
    
        create_cloudwatch_log_group(
            cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)
        create_role_info_table(dynamodb_resource)
        add_roles_to_ddb(dynamodb_resource)
        delete_index(TEST_DRIVE_TABLE_NAME)
    
        with patch('utility.get_db_client') as mock_get_db_client:
            mock_get_db_client.return_value = OS_DB_CLIENT
            from main import app
            app.config['TESTING'] = True
            app.config["RoleTable"] = ROLE_TABLE_NAME
            app.extensions = MagicMock()
            app.extensions["cognito_auth"].return_value = "mock_token"
            mock_get_user_details.return_value = {
                "projects": ["test-project"],
                "groups": [],
                "scopes": ROLE_TABLE_ITEMS[0]["scopes"]
            }
            with app.test_client() as client:
                client.set_cookie("user_id", "100")
                create_lookup_table(dynamodb_resource)
                lookup_resource = dynamodb_resource.Table(LOOKUP_TABLE_NAME)
                insert_items_into_lookup_table(lookup_resource)
    
                create_filter_attribute_table(dynamodb_resource)
                filter_table = dynamodb_resource.Table(FILTER_ATTRIBUTES_TABLE_NAME)
                insert_items_into_filter_attribute_drivesession_table(
                    filter_table,
                    SAMPLE_FILTER_DRIVE_DATA
                )
    
                create_index(TEST_DRIVE_TABLE_NAME, "drive")
                insert_data_to_index(TEST_DRIVE_TABLE_NAME, "drive",
                                     SAMPLE_DRIVE_DATA)
                response = client.get('/api/v1/driveSessions/filters',
                                      query_string={
                                        'page': "drive_sessions",
                                        'filter_level': "L2",
                                        'project_name': (f"{lookup_data[0]['project_name']}")
                                    })
    
                expected_response = {
                    'folder_name': {
                        'component': 'Text',
                        'props': {
                            'label': 'folder_name',
                            'variant': 'outlined'
                            },
                        'type': 'text'
                        },
                    'rec_year_month': {
                        'component': 'DatePicker',
                        'props': {
                            'format': 'YYYY/MM'
                            },
                        'type': 'text'
                        },
                    'rec_year_month_date': {
                        'component': 'DatePicker',
                        'props': {
                            'format': 'YYYY/MM/DD'
                            },
                        'type': 'text'
                        },
                    'rec_year_month_date_range': {
                        'component': 'DateTimeRangeFilter',
                        'db_fields': ['rec_year_month_date'],
                        'type': 'range'
                        },
                        'tags': {
                            'component': 'Text',
                            'multiple': 'true',
                            'props': {
                                'label': 'tags',
                                'variant': 'outlined'
                                },
                        'type': 'text'
                        },
                    'vehicle_id': {
                        'component': 'Text',
                        'props': {
                            'dropdown_name': 'vehicle_id',
                            'dropdown_values': [],
                            'label': 'vehicle_id',
                            'values': [],
                            'variant': 'outlined',
                            'visibility': 'true'
                            },
                        'type': 'text'
                        }
                    }
    
                data = response.json
                print(f"data: {data}")
>               assert response.status_code == 200
E               assert 500 == 200
E                +  where 500 = <WrapperTestResponse 125 bytes [500 INTERNAL SERVER ERROR]>.status_code

drivesession/tests/test_routes.py:627: AssertionError
-------------------------------------- Captured stdout call ---------------------------------------
data: {'message': 'An error occurred (ResourceNotFoundException) when calling the GetItem operation: Requested resource not found'}
-------------------------------------- Captured stderr call ---------------------------------------
[ERROR] - 2025-01-08 19:10:34,533 - helpers - Could not find one or more parameters in Parameter Store
Traceback (most recent call last):
  File "/home/kpit/ADCP_DEV/ADCP-Development/dashboard/backend/helpers.py", line 77, in get_ddb_table_names
    table_names['role_table'] = ssm_client.get_parameter(
  File "/home/kpit/ADCP_DEV/env/lib/python3.9/site-packages/botocore/client.py", line 569, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File "/home/kpit/ADCP_DEV/env/lib/python3.9/site-packages/botocore/client.py", line 1023, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.errorfactory.ParameterNotFound: An error occurred (ParameterNotFound) when calling the GetParameter operation: Parameter /Prod/UserManagement/DDB/RoleTable not found.
[INFO] - 2025-01-08 19:10:34,533 - helpers - Parameters store: Lookup: FOT-Honda-lookup, MapDetails: global-map-details, FilterAttr: dmp-filter-attributes, UserTable: users, UserPoolID: mock_id, RoleTable: 
[INFO] - 2025-01-08 19:10:35,003 - root - Fetched CloudWatch Group for API logging: /test-logs/
[INFO] - 2025-01-08 19:10:35,276 - opensearch - PUT https://localhost:9200/dmp-projectname-drive-data [status:200 request:0.204s]
[INFO] - 2025-01-08 19:10:35,412 - opensearch - PUT https://localhost:9200/dmp-projectname-drive-data/_doc/11%2320220301_024541?refresh=true [status:201 request:0.135s]
[INFO] - 2025-01-08 19:10:35,452 - opensearch - PUT https://localhost:9200/dmp-projectname-drive-data/_doc/11%2320220301_075415?refresh=true [status:201 request:0.040s]
[INFO] - 2025-01-08 19:10:35,666 - opensearch - PUT https://localhost:9200/dmp-projectname-drive-data/_doc/11%2320220301_000401?refresh=true [status:201 request:0.214s]
[INFO] - 2025-01-08 19:10:35,730 - opensearch - PUT https://localhost:9200/dmp-projectname-drive-data/_doc/12%2320220301_012315?refresh=true [status:201 request:0.063s]
[INFO] - 2025-01-08 19:10:35,899 - opensearch - PUT https://localhost:9200/dmp-projectname-drive-data/_doc/13%2320220301_233557?refresh=true [status:201 request:0.168s]
[INFO] - 2025-01-08 19:10:35,900 - Auth-Logs - User perms: ['list:driveSessionsCard', 'read:driveSessionsCard', 'list:driveSessionsTrajectory', 'read:driveSessionsTrajectory', 'read:driveSessionsStats', 'read:driveSessionsSpeedStats', 'read:driveSessionsDistanceStats', 'list:driveSessionsFilters', 'list:driveSessionsTags', 'write:driveSessionsTags', 'list:driveSessionsStatus', 'download:driveSessionsStatusLog', 'list:driveSessionsStatusFilters', 'view:driveSessionsData', 'download:driveSessionsData', 'list:driveSessionsData', 'share:driveSessionsCard', 'list:eventSessionsCard', 'read:eventSessionsCard', 'list:eventSessionsTrajectory', 'read:eventSessionsTrajectory', 'read:eventSessionsStats', 'list:eventSessionsFilters', 'list:eventSessionsTags', 'write:eventSessionsTags', 'list:eventSessionsStatus', 'list:eventSessionsGroup', 'read:eventSessionsStatusLog', 'list:eventSessionsStatusFilters', 'create:eventSessions', 'view:eventSessionsData', 'share:eventSessionsCard', 'list:projects', 'list:projectDetails', 'create:projects', 'read:projects', 'write:projects', 'delete:projects', 'list:users', 'create:users', 'read:users', 'write:users', 'delete:users', 'list:tickets', 'create:tickets', 'read:tickets', 'write:tickets']
[ERROR] - 2025-01-08 19:10:35,917 - root - An error occurred: An error occurred (ResourceNotFoundException) when calling the GetItem operation: Requested resource not found
Traceback (most recent call last):
  File "/home/kpit/ADCP_DEV/ADCP-Development/dashboard/backend/drivesession/routes.py", line 44, in list_drive_session_filters
    filter_response = filter_attributes_table.get_item(
  File "/home/kpit/ADCP_DEV/env/lib/python3.9/site-packages/boto3/resources/factory.py", line 581, in do_action
    response = action(self, *args, **kwargs)
  File "/home/kpit/ADCP_DEV/env/lib/python3.9/site-packages/boto3/resources/action.py", line 88, in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
  File "/home/kpit/ADCP_DEV/env/lib/python3.9/site-packages/botocore/client.py", line 569, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File "/home/kpit/ADCP_DEV/env/lib/python3.9/site-packages/botocore/client.py", line 1023, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.errorfactory.ResourceNotFoundException: An error occurred (ResourceNotFoundException) when calling the GetItem operation: Requested resource not found
[INFO] - 2025-01-08 19:10:35,918 - API-Log - {'user_id': 'mock_user_id', 'remote_ip': '127.0.0.1', 'source_path': '/api/v1/driveSessions/filters', 'request_method': 'GET', 'request_headers': {'User-Agent': 'Werkzeug/3.0.3', 'Host': 'localhost'}, 'request_endpoint': 'drivesession.list_drive_session_filters', 'response_headers': {'Content-Type': 'application/json', 'Content-Length': '125'}, 'response_status': 500, 'duration': 18.131999999999998, 'invoked_time': datetime.datetime(2025, 1, 8, 19, 10, 35, 900040)}
[INFO] - 2025-01-08 19:10:35,918 - root - API Log: {'user_id': 'mock_user_id', 'remote_ip': '127.0.0.1', 'source_path': '/api/v1/driveSessions/filters', 'request_method': 'GET', 'request_headers': {'User-Agent': 'Werkzeug/3.0.3', 'Host': 'localhost'}, 'request_endpoint': 'drivesession.list_drive_session_filters', 'response_headers': {'Content-Type': 'application/json', 'Content-Length': '125'}, 'response_status': 500, 'duration': 18.131999999999998, 'invoked_time': datetime.datetime(2025, 1, 8, 19, 10, 35, 900040)}
======================================== warnings summary =========================================
../../../env/lib/python3.9/site-packages/opensearchpy/connection/http_urllib3.py:214
  /home/kpit/ADCP_DEV/env/lib/python3.9/site-packages/opensearchpy/connection/http_urllib3.py:214: UserWarning: Connecting to https://localhost:9200 using SSL with verify_certs=False is insecure.
    warnings.warn(

../../../env/lib/python3.9/site-packages/urllib3/connectionpool.py:1064
dashboard/backend/drivesession/tests/test_routes.py::test_list_drive_session_filters_
dashboard/backend/drivesession/tests/test_routes.py::test_list_drive_session_filters_
  /home/kpit/ADCP_DEV/env/lib/python3.9/site-packages/urllib3/connectionpool.py:1064: InsecureRequestWarning: Unverified HTTPS request is being made to host 'localhost'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html#ssl-warnings
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
===================================== short test summary info =====================================
FAILED drivesession/tests/test_routes.py::test_list_drive_session_filters_ - assert 500 == 200
================================== 1 failed, 4 warnings in 2.80s ==================================
/home/kpit/ADCP_DEV/env/lib/python3.9/site-packages/watchtower/__init__.py:409: WatchtowerWarning: Failed to deliver logs: An error occurred (UnrecognizedClientException) when calling the PutLogEvents operation: The security token included in the request is invalid.
  warnings.warn(f"Failed to deliver logs: {e}", WatchtowerWarning)
/home/kpit/ADCP_DEV/env/lib/python3.9/site-packages/watchtower/__init__.py:415: WatchtowerWarning: Failed to deliver logs: None
  warnings.warn(f"Failed to deliver logs: {response}", WatchtowerWarning)
