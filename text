I have below utility functions,

def get_ddb_table_names(db: str = "DDB", env: str = ENV) -> tuple:
    """
    Get table names from parameter store.

    Args:
        db (str): db component name
        env (str): environment

    Returns:
        (tuple): table names
    """
    path = f"/{env}/{db}/"
    lookup = ""
    map_details = ""
    filter_attr = ""
    user_table = ""
    ssm_client = boto3.client("ssm", region_name=REGION_NAME)
    try:
        response = ssm_client.get_parameters_by_path(
            Path=path, Recursive=True, WithDecryption=True
        )
        for param_info in response.get("Parameters", []):
            name = param_info.get("Name", "")
            if "LookupTable" in name:
                lookup = param_info.get("Value", "")
            elif "FilterAttributesTable" in name:
                filter_attr = param_info.get("Value", "")
            elif "MapDetailsTable" in name:
                map_details = param_info.get("Value", "")

        response = ssm_client.get_parameter(
            Name=f"/{ENV}/UserManagement/DDB/UserTable"
        )

        user_table = response["Parameter"]["Value"]

    except ssm_client.exceptions.ParameterNotFound:
        logger.exception(
            "Could not find the User Table parameter in Parameter Store"
        )

    except ssm_client.exceptions.InternalServerError:
        logger.exception("Error occurred while fetching table names")

    logger.info(
        "Parameters store: Lookup: %s, MapDetails: %s, "
        "FilterAttr: %s, UserTable: %s"
        % (lookup, map_details, filter_attr, user_table)
    )
    return lookup, map_details, filter_attr, user_table


def call_fetch_description_events(
    description: str, page_no: int, page_size: int
) -> tuple[list[str], int, str]:
    """
    Call fetch_description_events to get list of event ID based on description.

    Args:
        description (str): The description to filter events by.
        page_no (int): page number for pagination
        page_size (int): page size for pagination

    Returns:
        tuple[list[str], int, str]: A tuple containing a list of event IDs,
                                    HTTP status code, and error message if any.
    """
    ssm_client = client("ssm", region_name=REGION_NAME)
    param_name = f"/{ENV}/DescriptionAPI/Endpoint/URL"
    ssm_response = ssm_client.get_parameter(Name=param_name)
    description_api_url = ssm_response["Parameter"]["Value"]
    description_api_url = (
        description_api_url + f"?page-number={page_no}&page-size={page_size}"
    )
    try:
        description_response = requests.post(
            description_api_url, json={"query": description}, timeout=30
        )
        if description_response.status_code == 200:
            event_ids = description_response.json().get("id", [])
            return event_ids, 200, ""
        if description_response.status_code == 404:
            msg = "Endpoint URL for fetch-description-events not found"
            return [], description_response.status_code, msg

        msg = "An error occurred while processing the request."
        return [], description_response.status_code, msg
    except Exception as e:
        logging.info(f"Exception in call_fetch_description_events- {e}")
        msg = "No events found"
        return [], 200, msg

so in get_ddb_table_names we have ssm client and we are getting parameter value but 
call_fetch_description_events function also we have created ssm client so can we resue the get_ddb_table_names functionality.
