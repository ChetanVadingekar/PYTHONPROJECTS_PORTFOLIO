import unittest
from unittest.mock import patch
from datetime import datetime
from your_module import format_project_details  # Import the function from your module

class TestFormatProjectDetails(unittest.TestCase):
    
    @patch('your_module.OpenSearchDriveSessionUtility')  # Patch the utility class
    @patch('your_module.get_country_details')  # Patch the get_country_details function
    def test_format_project_details_with_valid_rec_year_month_date(self, mock_get_country_details, mock_opensearch_utility):
        """
        Test case for when `rec_year_month_date` is a valid date string and needs to be formatted.
        """
        # Mocking the response of OpenSearchDriveSessionUtility's get_rec_year_month_date method
        mock_opensearch_utility.return_value.get_rec_year_month_date.return_value = "20240101"

        # Mocking the response of get_country_details to avoid dependency on external service
        mock_get_country_details.return_value = {
            "country_name": "Japan",
            "center_point": ["36.204824", "138.252924"]
        }

        # Input data for the function
        projects = [{
            "project_name": "Test Project",
            "country_code": "JP",
            "generation_name": "gen3",
            "model_name": "ADAS",
            "drive_session_table_name": "test-drive-session-table"
        }]
        
        # Call the function under test
        result = format_project_details(projects)

        # Expected date after formatting
        expected_date = datetime.strptime("20240101", "%Y%m%d").strftime("%Y-%m-%d")

        # Validate the result
        self.assertEqual(len(result), 1)
        self.assertEqual(result[0]["country"], "Japan")
        self.assertEqual(result[0]["projects"][0]["rec_year_month_date"], expected_date)

    @patch('your_module.OpenSearchDriveSessionUtility')  # Patch the utility class
    @patch('your_module.get_country_details')  # Patch the get_country_details function
    def test_format_project_details_with_na_rec_year_month_date(self, mock_get_country_details, mock_opensearch_utility):
        """
        Test case for when `rec_year_month_date` is 'NA' and should not be formatted.
        """
        # Mocking the response of OpenSearchDriveSessionUtility's get_rec_year_month_date method
        mock_opensearch_utility.return_value.get_rec_year_month_date.return_value = "NA"

        # Mocking the response of get_country_details to avoid dependency on external service
        mock_get_country_details.return_value = {
            "country_name": "Japan",
            "center_point": ["36.204824", "138.252924"]
        }

        # Input data for the function
        projects = [{
            "project_name": "Test Project",
            "country_code": "JP",
            "generation_name": "gen3",
            "model_name": "ADAS",
            "drive_session_table_name": "test-drive-session-table"
        }]
        
        # Call the function under test
        result = format_project_details(projects)

        # Validate the result
        self.assertEqual(len(result), 1)
        self.assertEqual(result[0]["country"], "Japan")
        self.assertEqual(result[0]["projects"][0]["rec_year_month_date"], "NA")

if __name__ == "__main__":
    unittest.main()
