we have opensearch_utility.py so basically we write code for opensearch here only. 

class OpenSearchEventStatisticsUtility:
    """
    A utility class for creating and executing OpenSearch queries.

    Attributes:
        index_name (str): The name of the OpenSearch index to query.
        input_data (list): The input data containing categories and
        include lists for aggregation.
    """

    def __init__(
        self: OpenSearchEventStatisticsUtilityVar,
        index_name: str,
        input_data: dict[str, dict[str, Any]],
    ) -> None:
        """
        Initialize the OpenSearchEventStatisticsUtility variables.

        Args:
            index_name (str): The name of the OpenSearch index.
            input_data (list): The input data for creating queries.
        """
        self.index_name = index_name
        self.input_data = input_data

    def create_query(
        self: OpenSearchEventStatisticsUtilityVar,
    ) -> dict[str, Any]:
        """
        Create an OpenSearch query based on the input data.

        Returns:
            dict: The OpenSearch query.
        """
        query: dict[str, Any] = {
            "size": 0,
            "query": {
                "bool": {"filter": [{"term": {"split_status": "SUCCESS"}}]}
            },
            "aggs": {},
        }

        for category_name, category_details in self.input_data.items():
            include_list = category_details.get('dropdown_values', [])
            query["aggs"][category_name] = self.create_aggregation(
                include_list
            )
        return query

    def create_aggregation(
        self: OpenSearchEventStatisticsUtilityVar, include_list: list
    ) -> dict:
        """
        Create an aggregation clause for the OpenSearch query.

        Args:
            include_list (list): list of terms to include in the aggregation.

        Returns:
            dict: The aggregation clause.
        """
        return {
            "terms": {"field": "tags", "include": include_list, "size": 100}
        }

    def search(
        self: OpenSearchEventStatisticsUtilityVar, index_name: str
    ) -> dict:
        """
        Execute an OpenSearch query on the given index.

        Args:
            index_name (str): The name of the OpenSearch index.

        Returns:
            dict: The response from the OpenSearch query.
        """
        if client.indices.exists(index=index_name):
            query = self.create_query()
            response = client.search(index=index_name, body=query)
            return response

        return {}


likewise can we write a class for to get the rec_year_month_date for resptive drive session index.
above code just for your reference. 
