from typing import Any, Dict

class OpenSearchDriveSessionUtility:
    """
    A utility class for querying OpenSearch to retrieve the most recent `rec_year_month_date` 
    for drive session indexes.

    Attributes:
        index_name (str): The name of the OpenSearch drive session index to query.
    """

    def __init__(self, index_name: str) -> None:
        """
        Initialize the OpenSearchDriveSessionUtility.

        Args:
            index_name (str): The name of the OpenSearch drive session index.
        """
        self.index_name = index_name

    def create_query(self) -> Dict[str, Any]:
        """
        Create an OpenSearch query to fetch the most recent `rec_year_month_date`.

        Returns:
            dict: The OpenSearch query.
        """
        query: Dict[str, Any] = {
            "size": 1,  # Fetch only the most recent document
            "_source": ["rec_year_month_date"],
            "sort": [
                {"rec_year_month_date": {"order": "desc"}}
            ],
            "query": {
                "match_all": {}
            }
        }
        return query

    def get_rec_year_month_date(self) -> str:
        """
        Execute an OpenSearch query on the drive session index to get the most recent `rec_year_month_date`.

        Returns:
            str: The most recent `rec_year_month_date` if found, or error message if the index doesn't exist.
        """
        if client.indices.exists(index=self.index_name):
            query = self.create_query()
            response = client.search(index=self.index_name, body=query)

            # Extract the rec_year_month_date from the response
            if response['hits']['hits']:
                rec_year_month_date = response['hits']['hits'][0]['_source'].get('rec_year_month_date', '')
                return rec_year_month_date if rec_year_month_date else ""
            else:
                return ""  # No data found for the index
        else:
            return "Index not found"
