We want to update the existing test cases so i am providing you some code to refer see below.

lookup_data = [
      {
        "bucket_name": "testprefix6-project-name-raw-bucket",
        "project_name": "no-index-tables",
        "bucket_arn": "arn:aws:s3:::testprefix6-project-name-raw-bucket",
        "company_name": "honda",
        "country_code": "jp",
        "country_name": "japan",
        "drive_session_table_name": "",
        "event_session_table_name": "",
        "generation_name": "1.1",
        "merged_bucket_name": "testprefix6-project-name-merged-bucket",
        "model_name": "EADAS",
        "organization_name": "as4",
        "parquet_bucket_name": "testprefix6-project-name-parquet-bucket",
        "pid": "a3197b70-df08-4344-850a-3b23890e8c0c",
        "prefix": "testprefix5",
        "raw_bucket_name": "testprefix6-project-name-raw-bucket",
        "region": "ap-northeast-1",
        "ros_bucket_name": "testprefix6-project-name-ros-bucket",
        "s3_access_role_arn": "AWSDataSyncS3Role_testprefix6-project-name-raw-bucket",
        "suffix": "raw-bucket"
    },
    {
        "bucket_name": "dummy-project-raw-bucket",
        "project_name": "dummy-project",
        "bucket_arn": "arn:aws:s3:::dummy-project-raw-bucket",
        "company_name": "honda",
        "country_code": "jp",
        "country_name": "japan",
        "wrong_drive_session_table_name": "dummy-project-drive-data",
        "wrong_event_session_table_name": "dummy-project-event-data",
        "generation_name": "generation 1.1",
        "merged_bucket_name": "dummy-project-merged-bucket",
        "model_name": "model_10",
        "organization_name": "as4",
        "parquet_bucket_name": "dummy-project-parquet-bucket",
        "pid": "a3197b70-df08-4344-850a-3b23890e8c0c",
        "prefix": "test2",
        "raw_bucket_name": "dummy-project-raw-bucket",
        "region": "ap-northeast-1",
        "ros_bucket_name": "dummy-project-ros-bucket",
        "s3_access_role_arn": "AWSDataSyncS3Role_dummy-project_raw-bucket",
        "suffix": "raw-bucket"
    }
  ]


@mock_aws
def test_get_project_details_success_response(cloudwatch_log_client,
                                               ssm_client, dynamodb_resource):
    """Test API success 200 response"""
    put_parameter_store_config(ssm_client, ENV)

    create_global_map_details_table(dynamodb_resource)
    countries_table = dynamodb_resource.Table(MAP_DETAILS_TABLE_NAME)
    insert_items_into_global_table(countries_table)

    create_users_table(dynamodb_resource)   
    user_table = dynamodb_resource.Table(USER_TABLE_NAME)
    insert_items_into_users_table(user_table)

    create_lookup_table(dynamodb_resource)
    lookup_table = dynamodb_resource.Table(LOOKUP_TABLE_NAME)
    insert_items_into_lookup_table(lookup_table)
    
    create_cloudwatch_log_group(
        cloudwatch_log_client, CLOUDWATCH_LOG_GROUP_NAME)
        
    with patch('utility.get_db_client') as mock_db_client:
        mock_db_client.return_value = OS_DB_CLIENT
        
        from main import app
        app.config['TESTING'] = True
        with app.test_client() as client:
            client.set_cookie(key="user_id", value="101")
            response = client.get(
                f"/get-project-details"
            )

            print(f"response: {response}")
            assert response.status_code == 200
            assert response.json['message'] == "Fetched projects from " \
                                                "lookup table"
            assert len(response.json["data"]) == 3

            for grouped_data in response.json["data"]:
                country = grouped_data["country"]
                if country == "Japan":
                    assert len(grouped_data["projects"]) == 7
                else:
                    assert len(grouped_data["projects"]) == 1

    delete_cloudwatch_log_group(cloudwatch_log_client, 
                                CLOUDWATCH_LOG_GROUP_NAME)

In main.py i have this API see below,

@app.route("/get-project-details", methods=["GET"])
def fetch_projects_info() -> ResponseReturnValue:
    """
    Get the projects information to render on home page.

    Returns:
        (ResponseReturnValue): list of events.
    """
    projection_attributes = [
        "project_name",
        "country_code",
        "generation_name",
        "model_name",
        "drive_session_table_name",
    ]
    try:
        response = lookup_table.scan(
            ProjectionExpression=",".join(projection_attributes)
        )

        projects = response.get("Items", [])

        while response.get("LastEvaluatedKey"):
            response = lookup_table.scan(
                ProjectionExpression=",".join(projection_attributes),
                ExclusiveStartKey=response["LastEvaluatedKey"],
            )
            if response.get("Items"):
                projects.extend(response.get("Items"))  # type: ignore

        if not projects:
            message = "No projects found in lookup table for home page listing"
            logging.info(message)
            return jsonify({"data": [], "message": message}), 200

        response_data = format_project_details(projects)

        return (
            jsonify(
                {
                    "data": response_data,
                    "message": "Fetched projects from lookup table",
                }
            ),
            200,
        )

    except ClientError as err:
        message = err.response['Error']['Message']
        code = err.response['Error']['Code']

        if code == "ResourceNotFoundException":
            message = f"DynamoDB Table {LOOKUP_TABLE} not found"
            logging.error(message)
            status_code = 404
        else:
            logging.error(f"Unhandled Exception: {code}:{message}")
            status_code = 500

        return jsonify({"message": message, "error_code": code}), status_code


in utility.py i have this utility function see below,

def format_project_details(projects: list) -> list:
    """
    Rearrange the projects based on region.

    Args:
        projects (list): Lookup table project items

    Returns:
        list: Formatted project details
    """
    data: dict = {}
    for project in projects:
        name = project.get("project_name")
        country_code = project.get("country_code", "JP").upper()

        # if country_code is an empty string
        if not country_code:
            country_code = "JP"

        generation_name = project.get("generation_name", "Gen1").capitalize()
        model_name = project.get("model_name", "PADAS").upper()
        drive_session_index_name = project.get("drive_session_table_name","adcp-gen3-fot-drive-data")
        version = f"Gen{generation_name} {model_name}"
        search_obj = OpenSearchDriveSessionUtility(drive_session_index_name)
        rec_year_month_date = search_obj.get_rec_year_month_date()
        formatted_date_obj = datetime.strptime(rec_year_month_date,"%Y%m%d").strftime("%Y-%d-%m")
        project_info = {
            "project_name": name, 
            "version": version, 
            "rec_year_month_date": formatted_date_obj
        }

        if country_code in data:
            data[country_code]["projects"].append(project_info)
        else:
            data[country_code] = {"projects": [project_info]}

    formatted_data = []
    for country in data:
        country_details = get_country_details(country_code=country)

        # Default setting the country_details to Japan
        country_name = country_details.get("country_name", "Japan")
        center_point = country_details.get(
            "center_point", ["36.204824", "138.252924"]
        )
        data_dict = {
            "country": country_name,
            "latlng": center_point,
            "projects": data[country]["projects"],
        }
        formatted_data.append(data_dict)

    return formatted_data


in opesearch_utility.py i have a class see below,

class OpenSearchDriveSessionUtility:
    """
    A utility class for querying OpenSearch to retrieve the most recent 'rec_year_month_date' 
    for drive session indexes.

    Attributes:
        index_name (str): The name of the OpenSearch drive session index to query.
    """

    def __init__(self, index_name: str) -> None:
        """
        Initialize the OpenSearchDriveSessionUtility.

        Args:
            index_name (str): The name of the OpenSearch drive session index.
        """
        self.index_name = index_name

    def create_query(self) -> dict[str, Any]:
        """
        Create an OpenSearch query to fetch the most recent `rec_year_month_date`.

        Returns:
            dict: The OpenSearch query.
        """
        query: dict[str, Any] = {
            "size": 1,  
            "_source": ["rec_year_month_date"],
            "sort": [
                {"rec_year_month_date": {"order": "desc"}}
            ],
            "query": {
                "match_all": {}
            }
        }
        return query
    
    def get_rec_year_month_date(self) -> str:
        """
        Execute an OpenSearch query on the drive session index to get the
        most recent "rec_year_month_date".
        
        Returns:
            str: The most recent `rec_year_month_date` if found.
            or empty response if the index doesn't exist.
        """
        if client.indices.exists(index=self.index_name):
            query = self.create_query()
            response = client.search(index=self.index_name, body=query)

            if response['hits']['hits']:
                rec_year_month_date = response['hits']['hits'][0]['_source'].get('rec_year_month_date') 
                return rec_year_month_date if rec_year_month_date else "NA"
            else:
                return "NA"
        else:
            return "NA"

when i ran this test_get_project_details_success_response test case it got failed and i am getting below error.

tests/test_main.py::test_get_project_details_success_response - ValueError: Empty value passed for a required argument 'index'.

how to fix this issue??
